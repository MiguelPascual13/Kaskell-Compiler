package kaskell;

%%
%line
%class AnalizadorKasklex
%type UnidadLexica
%unicode

%{
	private  KOperations kops;
	public String lexema() {return yytext();}
	public int fila() {return yyLine+1;}
%}

%eofval{
	return kops.unidadEof()
%eofval}

%init{
	kops = new KOperations(this); 
%init}

letra = ([A-Z]|[a-z])
digito = [0-9]
entero = {digito}+
identificador = {letra}({letra}|{digito})*
separador = [ \t\r\b\n]
comentario = {$.}({letra}|{digito}|{separador}|{.}{^$}|{$})*{.$}
suma = \+
menos = \-
prod = \*
div = /
izqPar = \(
derPar = \)
asig = \=
cartProd = X
coma = \,
mayor = \>
menor = \<
izqCor = \[
derCor = \]
izqLlav = \{
derLlav = \}
igualdad = \=\=
desigualdad = \=\\\=
puntoComa = \;
gorrito = \^
flecha = \|\-\>
mod = mod
or = or
and = and
not = not
int = kinkeger
bool = kool
struct = struK
punt = K\-
tipoSin = KK
if = if
else = else
while = while
for = for
dosPuntos = \:
%%
{separador}      {}
{comentario}     {}
{identificador}  {return kops.unidadId();}
{entero}         {return kops.unidadEntero();}
{suma}           {return kops.unidadSuma();}
{menos}          {return kops.unidadResta();}
{prod}           {return kops.unidadProducto();}
{div}            {return kops.unidadDivision();}
{izqPar}         {return kops.unidadIzqPar();}
{derPar}         {return kops.unidadderPar();}
{asig}           {return kops.unidadAsig();}
{cartProd}       {return kops.unidadCartProd();}
{coma}           {return kops.unidadComa();}
{mayor}          {return kops.unidadMayor();}
{menor}          {return kops.unidadMenor);}
{izqCor}         {return kops.unidadIzqCor();}
{derCor}         {return kops.unidadDerCor();}
{izqLlav}        {return kops.unidadIzqLlav();}
{derLlav}        {return kops.unidadDerLlav();}
{igualdad}       {return kops.unidadIgualdad();}
{desigualdad}    {return kops.unidadDesigualdad();}
{puntoComa}      {return kops.unidadPuntoComa();}
{gorrito}        {return kops.unidadElevado();}
{flecha}         {return kops.unidadFlecha();}
{mod}            {return kops.unidadModulo();}
{or}             {return kops.unidadOr();}
{and}            {return kops.unidadAnd();}
{not}            {return kops.unidadNot();}
{int}            {return kops.unidadInt();}
{bool}           {return kops.unidadBool();}
{struct}         {return kops.unidadStruct();}
{punt}           {return kops.unidadPunt();}
{tipoSin}        {return kops.unidadTipoSin();}
{if}             {return kops.unidadIf();}
{else}           {return kops.unidadElse();}
{while}          {return kops.unidadWhile();}
{for}            {return kops.unidadFor();}
{dosPuntos}      {return kops.unidadDosPuntos();}