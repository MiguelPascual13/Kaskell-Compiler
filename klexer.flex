/*-------------------------------------
  -----USER CODE-----------------------,
  usually package and import statements
  -------------------------------------*/

/*Setting our own package*/
package kaskell;

/*Importing CUP*/
import java_cup.runtime.*;

/**
 * This is the Kaskell lexer, auto-generated by JFlex
 */

%%
/*-----------------------------------------------
  -----OPTIONS AND DECLARATIONS------------------,
  jflex directives and java code to be used later
  -----------------------------------------------*/

/*Setting the character set*/
%unicode

/*Setting the name of the java output class*/
%class KLexer

/*Making "public" the java output class*/
%public

/*Customizing the cup generated class names (NOMBRE PROVISIONAL)*/
%cupsym Token

/*Making the lexer compatible with cup*/
%cup

/*Counting parameters enabled*/
%line
%column
%char

/*-----Code to be copied into the java output class-----*/
%{
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }
%}

/*-----Macros (regular definitions)-----*/

EndOfLine = \r|\n|\r\n
White = {EndOfLine} | [ \t\f]
Integer = 0 | [1-9][0-9]*
Identifier = [A-Za-z_][A-Za-z_0-9]*
Boolean = "krue"|"kalse"
Comment = "$." [^.] ~".$" | "$." "."+ "$"

%%
/*-----------------------
  -----LEXICAL RULES-----
  -----------------------*/

<YYINITIAL> {

    ";"                { return symbol(Token.SEMICOLON); }
    "+"                { System.out.print(" + "); return symbol(Token.PLUS); }
    "-"                { System.out.print(" - "); return symbol(Token.MINUS); }
    "*"                { System.out.print(" * "); return symbol(Token.TIMES); }
    "/"                { System.out.print(" / "); return symbol(Token.DIV); }
    ">"                { System.out.print(" > "); return symbol(Token.GE); }
    "<"                { System.out.print(" < "); return symbol(Token.LE); }
    "="                { System.out.print(" = "); return symbol(Token.EQ); }
    ":"                { System.out.print(" : "); return symbol(Token.DOTS); }
    "|"                { System.out.print(" | "); return symbol(Token.VERT); }
    "^"                { System.out.print(" ^ "); return symbol(Token.EXP); }
    "("                { System.out.print(" ( "); return symbol(Token.LPAR); }
    ")"                { System.out.print(" ) "); return symbol(Token.RPAR); }
    "["                { System.out.print(" [ "); return symbol(Token.LBRACK); }
    "]"                { System.out.print(" ] "); return symbol(Token.RBRACK); }
    "{"                { System.out.print(" { "); return symbol(Token.LBRACE); }
    "}"                { System.out.print(" } "); return symbol(Token.RBRACE); }

    {Comment} { System.out.print(yytext());
    			return symbol(Token.KOM, new Integer(1)); }
    {Boolean} { System.out.print(yytext());
    			return symbol(Token.KOOL, new Integer(yytext()))); }
    {Integer} { System.out.print(yytext());
                return symbol(Token.KINKEGER, new Integer(yytext())); }
    {Identifier} { System.out.print(yytext());
                   return symbol(Token.IDENT, new Integer(1)); }
    {White} {}   
}


/*-----Lex error handling-----*/
[^]                    { throw new Error("Illegal character <"+yytext()+">"); }
