
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package kaskell;

import java.util.ArrayList;
import java.util.List;
import expressions.*;
import functions.*;
import statements.*;
import types.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\007\004\000\002\007\003\000\002\010\004" +
    "\000\002\010\003\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\015" +
    "\004\000\002\015\005\000\002\014\006\000\002\014\005" +
    "\000\002\012\006\000\002\013\006\000\002\013\003\000" +
    "\002\025\005\000\002\024\004\000\002\024\003\000\002" +
    "\023\003\000\002\023\003\000\002\017\007\000\002\017" +
    "\011\000\002\020\007\000\002\021\007\000\002\022\007" +
    "\000\002\022\007\000\002\006\005\000\002\004\005\000" +
    "\002\005\006\000\002\005\005\000\002\003\004\000\002" +
    "\003\003\000\002\030\010\000\002\030\007\000\002\030" +
    "\006\000\002\030\007\000\002\031\011\000\002\031\006" +
    "\000\002\031\006\000\002\031\011\000\002\027\004\000" +
    "\002\042\005\000\002\042\003\000\002\032\005\000\002" +
    "\032\003\000\002\032\006\000\002\032\004\000\002\026" +
    "\004\000\002\026\003\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\003\000\002\034\004\000" +
    "\002\034\004\000\002\034\003\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\003\000\002\036\005\000\002\036\003\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\003\000" +
    "\002\040\004\000\002\040\004\000\002\040\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\004\004\004\001\002\000\022\004\004\023" +
    "\032\026\051\027\050\032\036\034\030\035\054\045\027" +
    "\001\002\000\004\002\243\001\002\000\010\002\000\004" +
    "\004\045\011\001\002\000\010\002\uffdb\004\uffdb\045\uffdb" +
    "\001\002\000\006\002\uffca\045\uffca\001\002\000\004\016" +
    "\224\001\002\000\006\002\uffff\045\011\001\002\000\006" +
    "\017\016\021\015\001\002\000\010\002\uffdc\004\uffdc\045" +
    "\uffdc\001\002\000\004\045\210\001\002\000\004\011\020" +
    "\001\002\000\006\002\uffd2\045\uffd2\001\002\000\004\014" +
    "\021\001\002\000\004\004\022\001\002\000\024\004\004" +
    "\023\032\026\051\027\050\030\033\032\036\034\030\035" +
    "\054\045\027\001\002\000\006\002\uffd5\045\uffd5\001\002" +
    "\000\006\002\uffd4\045\uffd4\001\002\000\004\007\ufff8\001" +
    "\002\000\026\004\ufffd\005\ufffd\023\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\032\ufffd\034\ufffd\035\ufffd\045\ufffd\001\002\000" +
    "\012\006\140\007\uffec\021\206\023\032\001\002\000\004" +
    "\021\202\001\002\000\004\045\201\001\002\000\004\046" +
    "\177\001\002\000\020\011\064\021\076\044\101\045\070" +
    "\046\065\047\075\050\077\001\002\000\004\007\ufff6\001" +
    "\002\000\012\006\uffe9\023\uffe9\026\uffe9\027\uffe9\001\002" +
    "\000\004\021\167\001\002\000\026\004\ufffa\005\ufffa\023" +
    "\ufffa\026\ufffa\027\ufffa\030\ufffa\032\ufffa\034\ufffa\035\ufffa" +
    "\045\ufffa\001\002\000\004\007\166\001\002\000\026\004" +
    "\ufffb\005\ufffb\023\ufffb\026\ufffb\027\ufffb\030\ufffb\032\ufffb" +
    "\034\ufffb\035\ufffb\045\ufffb\001\002\000\026\004\ufff5\005" +
    "\ufff5\023\ufff5\026\ufff5\027\ufff5\030\ufff5\032\ufff5\034\ufff5" +
    "\035\ufff5\045\ufff5\001\002\000\026\004\ufff4\005\ufff4\023" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\032\ufff4\034\ufff4\035\ufff4" +
    "\045\ufff4\001\002\000\004\007\ufff9\001\002\000\026\004" +
    "\ufff3\005\ufff3\023\ufff3\026\ufff3\027\ufff3\030\ufff3\032\ufff3" +
    "\034\ufff3\035\ufff3\045\ufff3\001\002\000\004\005\165\001" +
    "\002\000\010\023\032\026\051\027\050\001\002\000\014" +
    "\011\uffe7\017\uffe7\021\uffe7\031\uffe7\045\uffe7\001\002\000" +
    "\014\011\uffe8\017\uffe8\021\uffe8\031\uffe8\045\uffe8\001\002" +
    "\000\026\004\004\005\160\023\032\026\051\027\050\030" +
    "\033\032\036\034\030\035\054\045\027\001\002\000\004" +
    "\007\ufff7\001\002\000\004\021\055\001\002\000\010\026" +
    "\051\027\050\045\061\001\002\000\004\007\153\001\002" +
    "\000\004\045\150\001\002\000\004\022\146\001\002\000" +
    "\006\006\140\023\032\001\002\000\004\007\063\001\002" +
    "\000\020\011\064\021\076\044\101\045\070\046\065\047" +
    "\075\050\077\001\002\000\020\011\064\021\076\044\101" +
    "\045\070\046\065\047\075\050\077\001\002\000\040\007" +
    "\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\020\uffb4\022\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\001\002\000\040\007\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\020\uffb5\022\uffb5\036" +
    "\uffb5\037\uffb5\040\uffb5\041\135\042\136\043\uffb5\001\002" +
    "\000\034\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\020\uffb8\022\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\043\uffb8\001\002\000\040\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\020\uffb1\022\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\001\002\000" +
    "\034\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\127" +
    "\015\126\020\130\022\uffbc\036\uffbc\037\uffbc\040\uffbc\043" +
    "\125\001\002\000\024\007\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\013\uffbe\022\uffbe\036\uffbe\037\uffbe\040\uffbe\001\002\000" +
    "\024\007\uffc3\010\uffc3\011\uffc3\012\120\013\117\022\uffc3" +
    "\036\uffc3\037\116\040\115\001\002\000\014\007\uffc6\010" +
    "\uffc6\011\uffc6\022\uffc6\036\uffc6\001\002\000\040\007\uffb3" +
    "\010\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\020" +
    "\uffb3\022\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\001\002\000\020\011\064\021\076\044\101\045" +
    "\070\046\065\047\075\050\077\001\002\000\040\007\uffb2" +
    "\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\020" +
    "\uffb2\022\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\001\002\000\012\007\103\010\104\011\105\036" +
    "\106\001\002\000\020\011\064\021\076\044\101\045\070" +
    "\046\065\047\075\050\077\001\002\000\014\007\uffc4\010" +
    "\uffc4\011\uffc4\022\uffc4\036\uffc4\001\002\000\004\045\061" +
    "\001\002\000\020\011\064\021\076\044\101\045\070\046" +
    "\065\047\075\050\077\001\002\000\020\011\064\021\076" +
    "\044\101\045\070\046\065\047\075\050\077\001\002\000" +
    "\020\011\064\021\076\044\101\045\070\046\065\047\075" +
    "\050\077\001\002\000\014\007\uffc7\010\uffc7\011\uffc7\022" +
    "\uffc7\036\uffc7\001\002\000\014\007\uffc8\010\uffc8\011\uffc8" +
    "\022\uffc8\036\uffc8\001\002\000\014\007\uffc9\010\uffc9\011" +
    "\uffc9\022\uffc9\036\uffc9\001\002\000\004\022\uffe2\001\002" +
    "\000\012\010\104\011\105\022\114\036\106\001\002\000" +
    "\040\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0" +
    "\015\uffb0\020\uffb0\022\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\001\002\000\014\021\076\045\070" +
    "\046\065\047\075\050\077\001\002\000\014\021\076\045" +
    "\070\046\065\047\075\050\077\001\002\000\014\021\076" +
    "\045\070\046\065\047\075\050\077\001\002\000\014\021" +
    "\076\045\070\046\065\047\075\050\077\001\002\000\024" +
    "\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\022\uffc2\036" +
    "\uffc2\037\uffc2\040\uffc2\001\002\000\024\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\022\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\001\002\000\024\007\uffbf\010\uffbf\011\uffbf\012\uffbf" +
    "\013\uffbf\022\uffbf\036\uffbf\037\uffbf\040\uffbf\001\002\000" +
    "\024\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\022\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\001\002\000\014\021\076\045" +
    "\070\046\065\047\075\050\077\001\002\000\014\021\076" +
    "\045\070\046\065\047\075\050\077\001\002\000\014\021" +
    "\076\045\070\046\065\047\075\050\077\001\002\000\014" +
    "\021\076\045\070\046\065\047\075\050\077\001\002\000" +
    "\024\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\022\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\001\002\000\034\007\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\020\uffbb" +
    "\022\uffbb\036\uffbb\037\uffbb\040\uffbb\043\uffbb\001\002\000" +
    "\034\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\020\uffba\022\uffba\036\uffba\037\uffba\040\uffba\043" +
    "\uffba\001\002\000\034\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\020\uffb9\022\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\043\uffb9\001\002\000\034\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\020\uffb7\022" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\043\uffb7\001\002\000\034" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\020\uffb6\022\uffb6\036\uffb6\037\uffb6\040\uffb6\043\uffb6" +
    "\001\002\000\014\007\uffc5\010\uffc5\011\uffc5\022\uffc5\036" +
    "\uffc5\001\002\000\020\011\064\021\076\044\101\045\070" +
    "\046\065\047\075\050\077\001\002\000\006\006\142\023" +
    "\032\001\002\000\020\011\064\021\076\044\101\045\070" +
    "\046\065\047\075\050\077\001\002\000\012\006\uffea\023" +
    "\uffea\026\uffea\027\uffea\001\002\000\014\007\ufff0\010\104" +
    "\011\105\022\ufff0\036\106\001\002\000\014\007\uffef\010" +
    "\104\011\105\022\uffef\036\106\001\002\000\004\004\004" +
    "\001\002\000\026\004\uffe3\005\uffe3\023\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\032\uffe3\034\uffe3\035\uffe3\045\uffe3\001\002" +
    "\000\004\006\151\001\002\000\020\011\064\021\076\044" +
    "\101\045\070\046\065\047\075\050\077\001\002\000\012" +
    "\007\uffee\010\104\011\105\036\106\001\002\000\020\011" +
    "\064\021\076\044\101\045\070\046\065\047\075\050\077" +
    "\001\002\000\012\007\155\010\104\011\105\036\106\001" +
    "\002\000\004\045\061\001\002\000\004\022\uffe1\001\002" +
    "\000\026\004\ufffe\005\ufffe\023\ufffe\026\ufffe\027\ufffe\030" +
    "\ufffe\032\ufffe\034\ufffe\035\ufffe\045\ufffe\001\002\000\032" +
    "\002\uffdf\004\uffdf\005\uffdf\023\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\045\uffdf\001\002" +
    "\000\004\005\162\001\002\000\006\002\uffde\045\uffde\001" +
    "\002\000\004\045\164\001\002\000\004\007\ufff1\001\002" +
    "\000\006\002\uffdd\045\uffdd\001\002\000\026\004\ufffc\005" +
    "\ufffc\023\ufffc\026\ufffc\027\ufffc\030\ufffc\032\ufffc\034\ufffc" +
    "\035\ufffc\045\ufffc\001\002\000\020\011\064\021\076\044" +
    "\101\045\070\046\065\047\075\050\077\001\002\000\012" +
    "\010\104\011\105\022\171\036\106\001\002\000\004\004" +
    "\004\001\002\000\030\004\uffe6\005\uffe6\023\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\032\uffe6\033\173\034\uffe6\035\uffe6\045" +
    "\uffe6\001\002\000\004\004\004\001\002\000\026\004\uffe5" +
    "\005\uffe5\023\uffe5\026\uffe5\027\uffe5\030\uffe5\032\uffe5\034" +
    "\uffe5\035\uffe5\045\uffe5\001\002\000\012\007\176\010\104" +
    "\011\105\036\106\001\002\000\004\005\uffe0\001\002\000" +
    "\004\024\200\001\002\000\012\006\uffeb\023\uffeb\026\uffeb" +
    "\027\uffeb\001\002\000\006\006\151\007\ufff2\001\002\000" +
    "\020\011\064\021\076\044\101\045\070\046\065\047\075" +
    "\050\077\001\002\000\012\010\104\011\105\022\204\036" +
    "\106\001\002\000\004\004\004\001\002\000\026\004\uffe4" +
    "\005\uffe4\023\uffe4\026\uffe4\027\uffe4\030\uffe4\032\uffe4\034" +
    "\uffe4\035\uffe4\045\uffe4\001\002\000\004\045\210\001\002" +
    "\000\006\022\212\025\211\001\002\000\006\022\uffd0\025" +
    "\uffd0\001\002\000\004\045\213\001\002\000\004\007\uffed" +
    "\001\002\000\006\022\uffd1\025\uffd1\001\002\000\006\022" +
    "\215\025\211\001\002\000\004\017\216\001\002\000\004" +
    "\011\217\001\002\000\004\014\220\001\002\000\004\004" +
    "\022\001\002\000\006\002\uffd6\045\uffd6\001\002\000\006" +
    "\002\uffd3\045\uffd3\001\002\000\006\002\uffcb\045\uffcb\001" +
    "\002\000\012\011\230\023\032\026\051\027\050\001\002" +
    "\000\006\011\234\031\235\001\002\000\010\023\032\026" +
    "\051\027\050\001\002\000\006\011\uffce\031\uffce\001\002" +
    "\000\004\014\231\001\002\000\012\017\uffd8\021\uffd8\026" +
    "\051\027\050\001\002\000\006\017\uffd9\021\uffd9\001\002" +
    "\000\006\011\uffcc\031\uffcc\001\002\000\004\014\241\001" +
    "\002\000\010\023\032\026\051\027\050\001\002\000\006" +
    "\011\uffcf\031\uffcf\001\002\000\010\023\032\026\051\027" +
    "\050\001\002\000\006\011\uffcd\031\uffcd\001\002\000\012" +
    "\017\uffd7\021\uffd7\026\051\027\050\001\002\000\006\017" +
    "\uffda\021\uffda\001\002\000\004\002\001\001\002\000\024" +
    "\004\004\005\160\023\032\026\051\027\050\032\036\034" +
    "\030\035\054\045\027\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\010\002\004\003\005\004\006\001\001\000" +
    "\040\004\036\007\243\010\025\011\037\012\052\013\033" +
    "\014\043\015\024\016\040\017\041\020\042\021\044\023" +
    "\030\024\046\025\034\001\001\000\002\001\001\000\012" +
    "\004\013\026\011\027\007\030\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\222" +
    "\030\012\001\001\000\004\031\016\001\001\000\002\001" +
    "\001\000\004\042\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\023\005\022\001" +
    "\001\000\042\004\036\006\045\007\051\010\025\011\037" +
    "\012\052\013\033\014\043\015\024\016\040\017\041\020" +
    "\042\021\044\023\030\024\046\025\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\024\140\025\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\033\174\034" +
    "\073\035\072\036\071\037\070\040\066\041\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\162\025\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\036\006" +
    "\160\010\156\011\037\012\052\013\033\014\043\015\024" +
    "\016\040\017\041\020\042\021\044\023\030\024\046\025" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\055\014\061\022\057\023\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\140" +
    "\025\034\001\001\000\002\001\001\000\020\033\077\034" +
    "\073\035\072\036\071\037\070\040\066\041\065\001\001" +
    "\000\016\034\136\035\072\036\071\037\070\040\066\041" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\033\112\034\073\035\072\036\071\037\070\040" +
    "\066\041\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\034\101\035\072\036\071\037\070\040\066\041" +
    "\065\001\001\000\002\001\001\000\004\014\111\001\001" +
    "\000\016\034\110\035\072\036\071\037\070\040\066\041" +
    "\065\001\001\000\016\034\107\035\072\036\071\037\070" +
    "\040\066\041\065\001\001\000\016\034\106\035\072\036" +
    "\071\037\070\040\066\041\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\036\123\037\070" +
    "\040\066\041\065\001\001\000\012\036\122\037\070\040" +
    "\066\041\065\001\001\000\012\036\121\037\070\040\066" +
    "\041\065\001\001\000\012\036\120\037\070\040\066\041" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\133\041\065\001" +
    "\001\000\006\040\132\041\065\001\001\000\006\040\131" +
    "\041\065\001\001\000\012\036\130\037\070\040\066\041" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\033\144\034\073\035\072" +
    "\036\071\037\070\040\066\041\065\001\001\000\004\025" +
    "\142\001\001\000\020\033\143\034\073\035\072\036\071" +
    "\037\070\040\066\041\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\033\151\034" +
    "\073\035\072\036\071\037\070\040\066\041\065\001\001" +
    "\000\002\001\001\000\020\033\153\034\073\035\072\036" +
    "\071\037\070\040\066\041\065\001\001\000\002\001\001" +
    "\000\004\014\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\033\167\034\073\035\072\036\071" +
    "\037\070\040\066\041\065\001\001\000\002\001\001\000" +
    "\004\004\171\001\001\000\002\001\001\000\004\004\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\033\202\034\073\035\072\036\071\037\070\040" +
    "\066\041\065\001\001\000\002\001\001\000\004\004\204" +
    "\001\001\000\002\001\001\000\004\042\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\221" +
    "\005\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\226\024\225\025\034\032\224" +
    "\001\001\000\002\001\001\000\006\023\232\025\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\023\235\024\236\025\034\001\001\000\002" +
    "\001\001\000\006\023\237\025\142\001\001\000\002\001" +
    "\001\000\004\023\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\036\010\156\011\037\012\052\013" +
    "\033\014\043\015\024\016\040\017\041\020\042\021\044" +
    "\023\030\024\046\025\034\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuilder errorMessage = new StringBuilder("SYNTAX ERROR: ");
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.left >= 0) {
                errorMessage.append("line " + (s.left + 1));
                if (s.right >= 0) {
                    errorMessage.append(" column " + (s.right +1));
                }
            }
        }
        errorMessage.append("\n" + message);
        System.err.println(errorMessage);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= blocks 
            {
              Program RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Block> bs = (List<Block>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(bs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= blocks functions 
            {
              Program RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Block> bs = (List<Block>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Function> fs = (List<Function>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(bs, fs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statements statement 
            {
              List<Statement> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> ss = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= statement 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                              ArrayList<Statement> ss = new ArrayList<Statement>();
                              ss.add(s);
                              RESULT = ss;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= basic_statement SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BasicStatement s = (BasicStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= complex_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComplexStatement s = (ComplexStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= block 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // basic_statement ::= assignment 
            {
              BasicStatement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // basic_statement ::= declaration 
            {
              BasicStatement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // basic_statement ::= mixed_basic 
            {
              BasicStatement RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Mixed da = (Mixed)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = da; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // basic_statement ::= function_call 
            {
              BasicStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Call f = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // complex_statement ::= if 
            {
              ComplexStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // complex_statement ::= while 
            {
              ComplexStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While w = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // complex_statement ::= for 
            {
              ComplexStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration ::= type IDENT 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    RESULT = new Declaration(t,ident);
                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration ::= multi_array type IDENT 
            {
              Declaration RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Integer> m = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    RESULT = new Declaration(new ArrayType(t.getType(),m), ident);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // assignment ::= IDENT multi_array EQ expression 
            {
              Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Integer> ii = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   Identifier ident = new Identifier(i);
                   ident.setRow(ileft);
                   ident.setColumn(iright);
                   RESULT = new ArrayAssignment(ident,ii,e);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // assignment ::= IDENT EQ expression 
            {
              Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   Identifier ident = new Identifier(i);
                   ident.setRow(ileft);
                   ident.setColumn(iright);
                   RESULT = new Assignment(ident,e);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mixed_basic ::= type IDENT EQ expression 
            {
              Mixed RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    RESULT = new Mixed(t,ident,e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_basic",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function_call ::= IDENT LPAR ident_tuple RPAR 
            {
              Call RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Identifier> ii = (List<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new Call(ident, ii);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_call ::= IDENT 
            {
              Call RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new Call(ident, null);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // array ::= LBRACK INT RBRACK 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // multi_array ::= multi_array array 
            {
              List<Integer> RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Integer> ii = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ii.add(i); RESULT = ii; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_array",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // multi_array ::= array 
            {
              List<Integer> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ArrayList<Integer> ii = new ArrayList<Integer>();
                    ii.add(i);
                    RESULT = ii;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_array",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= INTT 
            {
              Type RESULT =null;
		 RESULT = new Type(Types.INTEGER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type(Types.BOOLEAN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if ::= IF LPAR expression RPAR block 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(e,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if ::= IF LPAR expression RPAR block ELSE block 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfElse(e, b1, b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // while ::= WHILE LPAR expression RPAR block 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(e,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // for ::= FOR LPAR for_tuple RPAR block 
            {
              For RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ForTuple f = (ForTuple)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(f,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // for_tuple ::= assignment SEMICOLON expression SEMICOLON assignment 
            {
              ForTuple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment l = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForTuple(a,e,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_tuple",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // for_tuple ::= mixed_basic SEMICOLON expression SEMICOLON assignment 
            {
              ForTuple RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Mixed da = (Mixed)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment l = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForTuple(da, e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_tuple",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // return ::= RETURN expression SEMICOLON 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // block ::= LBRACE statements RBRACE 
            {
              Block RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> ss = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(ss); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // return_block ::= LBRACE statements return RBRACE 
            {
              ReturnBlock RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Statement> ss = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnBlock(ss,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // return_block ::= LBRACE return RBRACE 
            {
              ReturnBlock RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnBlock(null, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // blocks ::= blocks block 
            {
              List<Block> RESULT =null;
		int bbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Block> bb = (List<Block>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 bb.add(b); RESULT = bb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blocks",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // blocks ::= block 
            {
              List<Block> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               ArrayList<Block> bb = new ArrayList<Block>();
               bb.add(b);
               RESULT = bb;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blocks",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function_head ::= IDENT DOTS type_cartesian MINUS GE type 
            {
              FunctionHead RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new FunctionHead(ident, tt, t);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_head",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_head ::= IDENT DOTS MINUS GE type 
            {
              FunctionHead RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new FunctionHead(ident, null, t);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_head",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // function_head ::= IDENT DOTS MINUS GE 
            {
              FunctionHead RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new FunctionHead(ident, null, null);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_head",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_head ::= IDENT DOTS type_cartesian MINUS GE 
            {
              FunctionHead RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new FunctionHead(ident, tt, null);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_head",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_tail ::= LPAR ident_tuple RPAR VERT MINUS GE return_block 
            {
              FunctionTail RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Identifier> ii = (List<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnBlock b = (ReturnBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionTail(ii, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_tail",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_tail ::= VERT MINUS GE return_block 
            {
              FunctionTail RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnBlock b = (ReturnBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionTail(null, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_tail",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_tail ::= VERT MINUS GE block 
            {
              FunctionTail RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionTail(null, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_tail",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_tail ::= LPAR ident_tuple RPAR VERT MINUS GE block 
            {
              FunctionTail RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Identifier> ii = (List<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionTail(ii, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_tail",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function ::= function_head function_tail 
            {
              Function RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionHead h = (FunctionHead)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionTail t = (FunctionTail)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Function(h,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ident_tuple ::= ident_tuple COMMA IDENT 
            {
              List<Identifier> RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Identifier> ii = (List<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    ii.add(ident); RESULT = ii;    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_tuple",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ident_tuple ::= IDENT 
            {
              List<Identifier> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    ArrayList<Identifier> ii = new ArrayList<Identifier>();
                    ii.add(ident);
                    RESULT = ii;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_tuple",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type_cartesian ::= type_cartesian X type 
            {
              List<Type> RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tt.add(t); RESULT = tt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_cartesian ::= type 
            {
              List<Type> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       ArrayList<Type> tt = new ArrayList<Type>();
                       tt.add(t);
                       RESULT = tt;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_cartesian ::= type_cartesian X multi_array type 
            {
              List<Type> RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Integer> m = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       tt.add(new ArrayType(t.getType(), m));
                       RESULT = tt;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_cartesian ::= multi_array type 
            {
              List<Type> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Integer> m = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       ArrayList<Type> tt = new ArrayList<Type>();
                       tt.add(new ArrayType(t.getType(), m));
                       RESULT = tt;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // functions ::= functions function 
            {
              List<Function> RESULT =null;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Function> ff = (List<Function>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ff.add(f); RESULT = ff; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // functions ::= function 
            {
              List<Function> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ArrayList<Function> ff = new ArrayList<Function>();
                  ff.add(f);
                  RESULT = ff; 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= expression PLUS expression_p1 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.PLUS,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= expression MINUS expression_p1 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.MINUS,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= expression OR expression_p1 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.OR,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= expression_p1 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression_p1 ::= MINUS expression_p1 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOperators.UNARY_MINUS,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression_p1 ::= NOT expression_p1 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOperators.NOT,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression_p1 ::= expression_p2 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression_p2 ::= expression_p2 TIMES expression_p3 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.PRODUCT,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression_p2 ::= expression_p2 DIV expression_p3 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.DIV,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression_p2 ::= expression_p2 MOD expression_p3 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.MODULUS,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression_p2 ::= expression_p2 AND expression_p3 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.AND,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression_p2 ::= expression_p3 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p2",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression_p3 ::= expression_p4 EXP expression_p3 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.EXPONENTIAL,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression_p3 ::= expression_p4 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p3",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression_p4 ::= expression_p4 GE expression_p5 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.GREATER,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p4",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression_p4 ::= expression_p4 LE expression_p5 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.LOWER,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p4",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression_p4 ::= expression_p4 EQQ expression_p5 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.EQUALS,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p4",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression_p4 ::= expression_p5 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p4",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression_p5 ::= expression_p6 PPLUS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UnaryExpression(UnaryOperators.PLUS_PLUS,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p5",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression_p5 ::= expression_p6 MMINUS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UnaryExpression(UnaryOperators.MINUS_MINUS,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p5",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression_p5 ::= expression_p6 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p5",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression_p6 ::= INT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DummyInteger(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression_p6 ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new DummyBoolean(new Boolean(true)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression_p6 ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new DummyBoolean(new Boolean(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression_p6 ::= IDENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = ident;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression_p6 ::= LPAR expression RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
