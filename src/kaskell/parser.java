
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package kaskell;

import java.util.ArrayList;
import java.util.List;
import expressions.*;
import functions.*;
import statements.*;
import types.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\002\003\000\002\002\004\000\002\007\004" +
    "\000\002\007\003\000\002\010\004\000\002\010\003\000" +
    "\002\010\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\014\004\000\002\014\005" +
    "\000\002\014\004\000\002\014\005\000\002\013\006\000" +
    "\002\013\005\000\002\013\005\000\002\012\006\000\002" +
    "\044\005\000\002\044\003\000\002\025\005\000\002\026" +
    "\005\000\002\023\004\000\002\023\003\000\002\024\004" +
    "\000\002\024\003\000\002\022\003\000\002\022\003\000" +
    "\002\047\005\000\002\047\004\000\002\046\011\000\002" +
    "\045\004\000\002\045\003\000\002\016\007\000\002\016" +
    "\011\000\002\017\007\000\002\020\007\000\002\021\007" +
    "\000\002\021\007\000\002\021\007\000\002\021\007\000" +
    "\002\006\005\000\002\004\005\000\002\005\006\000\002" +
    "\005\005\000\002\003\004\000\002\003\003\000\002\031" +
    "\010\000\002\031\007\000\002\031\006\000\002\031\007" +
    "\000\002\032\011\000\002\032\006\000\002\032\006\000" +
    "\002\032\011\000\002\030\004\000\002\043\005\000\002" +
    "\043\003\000\002\033\005\000\002\033\003\000\002\033" +
    "\006\000\002\033\004\000\002\033\005\000\002\033\003" +
    "\000\002\027\004\000\002\027\003\000\002\050\005\000" +
    "\002\050\005\000\002\050\006\000\002\050\006\000\002" +
    "\050\007\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\003\000\002\035\004\000\002\035\004" +
    "\000\002\035\003\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\003\000\002" +
    "\037\005\000\002\037\003\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\003\000\002\041\004" +
    "\000\002\041\004\000\002\041\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\006\000\002\042\005\000\002\042\003\000\002\042" +
    "\004\000\002\042\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\006\004\004\047\007\001\002\000\036\004" +
    "\004\011\043\021\067\023\061\026\060\027\047\032\051" +
    "\034\065\035\042\044\045\047\057\050\034\051\056\052" +
    "\072\001\002\000\006\004\004\047\007\001\002\000\004" +
    "\002\323\001\002\000\004\016\306\001\002\000\006\004" +
    "\uffda\047\uffda\001\002\000\010\002\ufffe\004\004\047\014" +
    "\001\002\000\010\002\uffcc\004\uffcc\047\uffcc\001\002\000" +
    "\006\002\uffb9\047\uffb9\001\002\000\004\016\265\001\002" +
    "\000\006\002\ufffd\047\014\001\002\000\010\002\uffcd\004" +
    "\uffcd\047\uffcd\001\002\000\006\017\021\021\020\001\002" +
    "\000\004\047\253\001\002\000\004\011\023\001\002\000" +
    "\006\002\uffc3\047\uffc3\001\002\000\004\014\024\001\002" +
    "\000\004\004\025\001\002\000\040\004\004\011\043\021" +
    "\067\023\061\026\060\027\047\030\054\032\051\034\065" +
    "\035\042\044\045\047\057\050\034\051\056\052\072\001" +
    "\002\000\006\002\uffc6\047\uffc6\001\002\000\006\002\uffc5" +
    "\047\uffc5\001\002\000\004\007\ufff5\001\002\000\042\004" +
    "\004\005\247\011\043\021\067\023\061\026\060\027\047" +
    "\030\054\032\051\034\065\035\042\044\045\047\057\050" +
    "\034\051\056\052\072\001\002\000\044\007\uff9f\010\uff9f" +
    "\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\020\uff9f\022" +
    "\uff9f\024\uff9f\025\uff9f\036\uff9f\037\uff9f\040\uff9f\041\244" +
    "\042\245\043\uff9f\001\002\000\040\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\020\uffa2\022\uffa2" +
    "\024\uffa2\025\uffa2\036\uffa2\037\uffa2\040\uffa2\043\uffa2\001" +
    "\002\000\044\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e" +
    "\014\uff9e\015\uff9e\020\uff9e\022\uff9e\024\uff9e\025\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\001\002" +
    "\000\040\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014" +
    "\236\015\235\020\237\022\uffa6\024\uffa6\025\uffa6\036\uffa6" +
    "\037\uffa6\040\uffa6\043\234\001\002\000\042\004\ufff8\005" +
    "\ufff8\011\ufff8\021\ufff8\023\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\032\ufff8\034\ufff8\035\ufff8\044\ufff8\047\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\001\002\000\030\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\022\uffa8\024\uffa8\025\uffa8\036\uffa8\037" +
    "\uffa8\040\uffa8\001\002\000\030\007\uffad\010\uffad\011\uffad" +
    "\012\227\013\226\022\uffad\024\uffad\025\uffad\036\uffad\037" +
    "\225\040\224\001\002\000\020\007\uffb0\010\uffb0\011\uffb0" +
    "\022\uffb0\024\uffb0\025\uffb0\036\uffb0\001\002\000\004\021" +
    "\176\001\002\000\020\011\043\021\067\044\045\047\077" +
    "\050\034\051\056\052\072\001\002\000\012\023\061\026" +
    "\060\027\047\047\172\001\002\000\020\011\043\021\067" +
    "\044\045\047\077\050\034\051\056\052\072\001\002\000" +
    "\004\007\166\001\002\000\014\011\uffdf\017\uffdf\021\uffdf" +
    "\031\uffdf\047\uffdf\001\002\000\004\007\ufff7\001\002\000" +
    "\004\021\160\001\002\000\012\007\ufff4\010\104\011\105" +
    "\036\106\001\002\000\042\004\ufffb\005\ufffb\011\ufffb\021" +
    "\ufffb\023\ufffb\026\ufffb\027\ufffb\030\ufffb\032\ufffb\034\ufffb" +
    "\035\ufffb\044\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\001" +
    "\002\000\020\011\043\021\067\044\045\047\077\050\034" +
    "\051\056\052\072\001\002\000\044\006\154\007\uff98\010" +
    "\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\020\uff98" +
    "\022\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043" +
    "\uff98\046\102\001\002\000\044\007\uff9d\010\uff9d\011\uff9d" +
    "\012\uff9d\013\uff9d\014\uff9d\015\uff9d\020\uff9d\022\uff9d\024" +
    "\uff9d\025\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\001\002\000\050\006\146\007\uff9b\010\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\020\uff9b\021\112" +
    "\023\114\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043" +
    "\uff9b\046\116\047\150\001\002\000\014\011\uffe0\017\uffe0" +
    "\021\uffe0\031\uffe0\047\uffe0\001\002\000\004\050\144\001" +
    "\002\000\042\004\ufff2\005\ufff2\011\ufff2\021\ufff2\023\ufff2" +
    "\026\ufff2\027\ufff2\030\ufff2\032\ufff2\034\ufff2\035\ufff2\044" +
    "\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\001\002\000\042" +
    "\004\ufff3\005\ufff3\011\ufff3\021\ufff3\023\ufff3\026\ufff3\027" +
    "\ufff3\030\ufff3\032\ufff3\034\ufff3\035\ufff3\044\ufff3\047\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\001\002\000\042\004\ufff1\005" +
    "\ufff1\011\ufff1\021\ufff1\023\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\032\ufff1\034\ufff1\035\ufff1\044\ufff1\047\ufff1\050\ufff1\051" +
    "\ufff1\052\ufff1\001\002\000\004\021\140\001\002\000\042" +
    "\004\ufff9\005\ufff9\011\ufff9\021\ufff9\023\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\032\ufff9\034\ufff9\035\ufff9\044\ufff9\047\ufff9" +
    "\050\ufff9\051\ufff9\052\ufff9\001\002\000\020\011\043\021" +
    "\067\044\045\047\077\050\034\051\056\052\072\001\002" +
    "\000\004\005\135\001\002\000\004\007\ufff6\001\002\000" +
    "\044\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c" +
    "\015\uff9c\020\uff9c\022\uff9c\024\uff9c\025\uff9c\036\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\001\002\000\012" +
    "\023\uffe1\026\uffe1\027\uffe1\047\uffe1\001\002\000\004\047" +
    "\075\001\002\000\006\006\076\007\ufff0\001\002\000\020" +
    "\011\043\021\067\044\045\047\077\050\034\051\056\052" +
    "\072\001\002\000\052\007\uff9b\010\uff9b\011\uff9b\012\uff9b" +
    "\013\uff9b\014\uff9b\015\uff9b\020\uff9b\021\112\022\uff9b\023" +
    "\114\024\uff9b\025\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\043\uff9b\046\116\001\002\000\012\007\uffe9\010" +
    "\104\011\105\036\106\001\002\000\046\007\uff98\010\uff98" +
    "\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\020\uff98\022" +
    "\uff98\024\uff98\025\uff98\036\uff98\037\uff98\040\uff98\041\uff98" +
    "\042\uff98\043\uff98\046\102\001\002\000\004\047\103\001" +
    "\002\000\050\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\015\uffb8\020\uffb8\022\uffb8\024\uffb8\025" +
    "\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\046\uffb8\001\002\000\020\011\043\021\067\044\045\047" +
    "\077\050\034\051\056\052\072\001\002\000\020\011\043" +
    "\021\067\044\045\047\077\050\034\051\056\052\072\001" +
    "\002\000\020\011\043\021\067\044\045\047\077\050\034" +
    "\051\056\052\072\001\002\000\020\007\uffb1\010\uffb1\011" +
    "\uffb1\022\uffb1\024\uffb1\025\uffb1\036\uffb1\001\002\000\020" +
    "\007\uffb2\010\uffb2\011\uffb2\022\uffb2\024\uffb2\025\uffb2\036" +
    "\uffb2\001\002\000\020\007\uffb3\010\uffb3\011\uffb3\022\uffb3" +
    "\024\uffb3\025\uffb3\036\uffb3\001\002\000\022\011\043\021" +
    "\067\022\131\044\045\047\077\050\034\051\056\052\072" +
    "\001\002\000\050\007\uff97\010\uff97\011\uff97\012\uff97\013" +
    "\uff97\014\uff97\015\uff97\020\uff97\022\uff97\023\114\024\uff97" +
    "\025\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043" +
    "\uff97\046\124\001\002\000\020\011\043\021\067\044\045" +
    "\047\077\050\034\051\056\052\072\001\002\000\052\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\046\uffe3" +
    "\001\002\000\004\047\117\001\002\000\052\006\uffb7\007" +
    "\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7" +
    "\020\uffb7\022\uffb7\023\114\024\uffb7\025\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\046\uffb7\001\002" +
    "\000\052\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\020\uffb5\022\uffb5\023\114\024\uffb5" +
    "\025\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\046\uffb5\001\002\000\052\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\020\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\046\uffe4\001\002\000\012\010" +
    "\104\011\105\024\123\036\106\001\002\000\052\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\020\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\046\uffe6\001" +
    "\002\000\004\047\125\001\002\000\052\006\uffb6\007\uffb6" +
    "\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\020" +
    "\uffb6\022\uffb6\023\114\024\uffb6\025\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\046\uffb6\001\002\000" +
    "\052\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\015\uffb4\020\uffb4\022\uffb4\023\114\024\uffb4\025" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\046\uffb4\001\002\000\014\010\104\011\105\022\uffe7\025" +
    "\uffe7\036\106\001\002\000\006\022\133\025\132\001\002" +
    "\000\044\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014" +
    "\uff99\015\uff99\020\uff99\022\uff99\024\uff99\025\uff99\036\uff99" +
    "\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\001\002\000" +
    "\020\011\043\021\067\044\045\047\077\050\034\051\056" +
    "\052\072\001\002\000\044\007\uff9a\010\uff9a\011\uff9a\012" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\020\uff9a\022\uff9a\024\uff9a" +
    "\025\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\001\002\000\014\010\104\011\105\022\uffe8\025\uffe8" +
    "\036\106\001\002\000\006\002\uffce\047\uffce\001\002\000" +
    "\012\010\104\011\105\022\137\036\106\001\002\000\044" +
    "\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\020\uff96\022\uff96\024\uff96\025\uff96\036\uff96\037\uff96" +
    "\040\uff96\041\uff96\042\uff96\043\uff96\001\002\000\020\011" +
    "\043\021\067\044\045\047\077\050\034\051\056\052\072" +
    "\001\002\000\012\010\104\011\105\022\142\036\106\001" +
    "\002\000\004\004\004\001\002\000\042\004\uffd7\005\uffd7" +
    "\011\uffd7\021\uffd7\023\uffd7\026\uffd7\027\uffd7\030\uffd7\032" +
    "\uffd7\034\uffd7\035\uffd7\044\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\052\uffd7\001\002\000\004\024\145\001\002\000\012\023" +
    "\uffe5\026\uffe5\027\uffe5\047\uffe5\001\002\000\020\011\043" +
    "\021\067\044\045\047\077\050\034\051\056\052\072\001" +
    "\002\000\046\006\151\007\uff97\010\uff97\011\uff97\012\uff97" +
    "\013\uff97\014\uff97\015\uff97\020\uff97\022\uff97\023\114\036" +
    "\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\046\124" +
    "\001\002\000\004\007\uffee\001\002\000\020\011\043\021" +
    "\067\044\045\047\077\050\034\051\056\052\072\001\002" +
    "\000\014\007\uffec\010\104\011\105\022\uffec\036\106\001" +
    "\002\000\014\007\uffea\010\104\011\105\022\uffea\036\106" +
    "\001\002\000\020\011\043\021\067\044\045\047\077\050" +
    "\034\051\056\052\072\001\002\000\014\007\uffeb\010\104" +
    "\011\105\022\uffeb\036\106\001\002\000\012\007\157\010" +
    "\104\011\105\036\106\001\002\000\004\005\uffd1\001\002" +
    "\000\020\011\043\021\067\044\045\047\077\050\034\051" +
    "\056\052\072\001\002\000\012\010\104\011\105\022\162" +
    "\036\106\001\002\000\004\004\004\001\002\000\044\004" +
    "\uffd9\005\uffd9\011\uffd9\021\uffd9\023\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\032\uffd9\033\164\034\uffd9\035\uffd9\044\uffd9\047" +
    "\uffd9\050\uffd9\051\uffd9\052\uffd9\001\002\000\004\004\004" +
    "\001\002\000\042\004\uffd8\005\uffd8\011\uffd8\021\uffd8\023" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\032\uffd8\034\uffd8\035\uffd8" +
    "\044\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\001\002\000" +
    "\042\004\ufffa\005\ufffa\011\ufffa\021\ufffa\023\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\032\ufffa\034\ufffa\035\ufffa\044\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\001\002\000\020\007\uffae" +
    "\010\uffae\011\uffae\022\uffae\024\uffae\025\uffae\036\uffae\001" +
    "\002\000\012\023\uffe2\026\uffe2\027\uffe2\047\uffe2\001\002" +
    "\000\004\047\174\001\002\000\004\047\173\001\002\000" +
    "\004\007\uffed\001\002\000\004\007\uffef\001\002\000\020" +
    "\007\uffaf\010\uffaf\011\uffaf\022\uffaf\024\uffaf\025\uffaf\036" +
    "\uffaf\001\002\000\010\026\060\027\047\047\203\001\002" +
    "\000\006\006\154\046\102\001\002\000\004\007\217\001" +
    "\002\000\004\047\216\001\002\000\004\022\214\001\002" +
    "\000\010\006\146\023\114\046\116\001\002\000\004\007" +
    "\205\001\002\000\020\011\043\021\067\044\045\047\077" +
    "\050\034\051\056\052\072\001\002\000\012\007\207\010" +
    "\104\011\105\036\106\001\002\000\020\011\043\021\067" +
    "\044\045\047\210\050\034\051\056\052\072\001\002\000" +
    "\046\006\146\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b" +
    "\015\uff9b\020\uff9b\021\112\022\uff9b\023\114\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\046\116\001\002" +
    "\000\004\022\uffd5\001\002\000\012\010\104\011\105\022" +
    "\uffd3\036\106\001\002\000\010\006\151\023\114\046\124" +
    "\001\002\000\004\004\004\001\002\000\042\004\uffd6\005" +
    "\uffd6\011\uffd6\021\uffd6\023\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\032\uffd6\034\uffd6\035\uffd6\044\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\001\002\000\004\006\076\001\002\000\020" +
    "\011\043\021\067\044\045\047\077\050\034\051\056\052" +
    "\072\001\002\000\012\007\221\010\104\011\105\036\106" +
    "\001\002\000\020\011\043\021\067\044\045\047\210\050" +
    "\034\051\056\052\072\001\002\000\004\022\uffd4\001\002" +
    "\000\012\010\104\011\105\022\uffd2\036\106\001\002\000" +
    "\014\021\067\047\077\050\034\051\056\052\072\001\002" +
    "\000\014\021\067\047\077\050\034\051\056\052\072\001" +
    "\002\000\014\021\067\047\077\050\034\051\056\052\072" +
    "\001\002\000\014\021\067\047\077\050\034\051\056\052" +
    "\072\001\002\000\030\007\uffac\010\uffac\011\uffac\012\uffac" +
    "\013\uffac\022\uffac\024\uffac\025\uffac\036\uffac\037\uffac\040" +
    "\uffac\001\002\000\030\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\022\uffab\024\uffab\025\uffab\036\uffab\037\uffab\040" +
    "\uffab\001\002\000\030\007\uffa9\010\uffa9\011\uffa9\012\uffa9" +
    "\013\uffa9\022\uffa9\024\uffa9\025\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\001\002\000\030\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\013\uffaa\022\uffaa\024\uffaa\025\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\001\002\000\014\021\067\047\077\050\034\051\056" +
    "\052\072\001\002\000\014\021\067\047\077\050\034\051" +
    "\056\052\072\001\002\000\014\021\067\047\077\050\034" +
    "\051\056\052\072\001\002\000\014\021\067\047\077\050" +
    "\034\051\056\052\072\001\002\000\030\007\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\022\uffa7\024\uffa7\025\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\001\002\000\040\007\uffa5\010\uffa5" +
    "\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\020\uffa5\022" +
    "\uffa5\024\uffa5\025\uffa5\036\uffa5\037\uffa5\040\uffa5\043\uffa5" +
    "\001\002\000\040\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013" +
    "\uffa4\014\uffa4\015\uffa4\020\uffa4\022\uffa4\024\uffa4\025\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\043\uffa4\001\002\000\040\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\020\uffa3\022\uffa3\024\uffa3\025\uffa3\036\uffa3\037\uffa3\040" +
    "\uffa3\043\uffa3\001\002\000\040\007\uffa1\010\uffa1\011\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\015\uffa1\020\uffa1\022\uffa1\024" +
    "\uffa1\025\uffa1\036\uffa1\037\uffa1\040\uffa1\043\uffa1\001\002" +
    "\000\040\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\020\uffa0\022\uffa0\024\uffa0\025\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\043\uffa0\001\002\000\042\004\ufffc\005" +
    "\ufffc\011\ufffc\021\ufffc\023\ufffc\026\ufffc\027\ufffc\030\ufffc" +
    "\032\ufffc\034\ufffc\035\ufffc\044\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\052\ufffc\001\002\000\046\002\uffd0\004\uffd0\005\uffd0" +
    "\011\uffd0\021\uffd0\023\uffd0\026\uffd0\027\uffd0\030\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\044\uffd0\047\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\001\002\000\004\005\251\001\002\000" +
    "\006\002\uffcf\047\uffcf\001\002\000\006\022\255\025\254" +
    "\001\002\000\006\022\uffc1\025\uffc1\001\002\000\004\047" +
    "\263\001\002\000\004\017\256\001\002\000\004\011\257" +
    "\001\002\000\004\014\260\001\002\000\004\004\025\001" +
    "\002\000\006\002\uffc7\047\uffc7\001\002\000\006\002\uffc4" +
    "\047\uffc4\001\002\000\006\022\uffc2\025\uffc2\001\002\000" +
    "\006\002\uffba\047\uffba\001\002\000\014\011\266\023\061" +
    "\026\060\027\047\047\267\001\002\000\004\014\304\001" +
    "\002\000\006\011\uffbb\031\uffbb\001\002\000\006\011\274" +
    "\031\275\001\002\000\010\023\061\026\060\027\047\001" +
    "\002\000\006\011\uffbf\031\uffbf\001\002\000\006\011\uffbd" +
    "\031\uffbd\001\002\000\004\014\302\001\002\000\012\023" +
    "\061\026\060\027\047\047\277\001\002\000\006\011\uffc0" +
    "\031\uffc0\001\002\000\006\011\uffbc\031\uffbc\001\002\000" +
    "\010\023\061\026\060\027\047\001\002\000\006\011\uffbe" +
    "\031\uffbe\001\002\000\012\017\uffc8\021\uffc8\026\060\027" +
    "\047\001\002\000\006\017\uffcb\021\uffcb\001\002\000\012" +
    "\017\uffc9\021\uffc9\026\060\027\047\001\002\000\006\017" +
    "\uffca\021\uffca\001\002\000\004\006\307\001\002\000\004" +
    "\045\310\001\002\000\004\004\311\001\002\000\012\023" +
    "\061\026\060\027\047\047\312\001\002\000\004\047\150" +
    "\001\002\000\004\007\322\001\002\000\004\047\321\001" +
    "\002\000\014\005\317\023\061\026\060\027\047\047\312" +
    "\001\002\000\004\007\320\001\002\000\006\004\uffdc\047" +
    "\uffdc\001\002\000\014\005\uffde\023\uffde\026\uffde\027\uffde" +
    "\047\uffde\001\002\000\004\007\ufff0\001\002\000\014\005" +
    "\uffdd\023\uffdd\026\uffdd\027\uffdd\047\uffdd\001\002\000\004" +
    "\002\001\001\002\000\006\004\uffdb\047\uffdb\001\002\000" +
    "\010\002\000\004\004\047\014\001\002\000\006\002\uffff" +
    "\047\014\001\002\000\040\004\004\005\247\011\043\021" +
    "\067\023\061\026\060\027\047\032\051\034\065\035\042" +
    "\044\045\047\057\050\034\051\056\052\072\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\014\002\005\003\010\004\011\045\004\046" +
    "\007\001\001\000\056\004\035\007\326\010\052\011\045" +
    "\012\027\013\047\014\070\015\065\016\062\017\061\020" +
    "\063\022\073\024\043\026\072\034\051\035\040\036\037" +
    "\037\036\040\034\041\032\042\031\050\054\001\001\000" +
    "\010\003\324\004\011\046\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\015\027" +
    "\014\030\012\031\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\263\031\016\001" +
    "\001\000\002\001\001\000\004\032\021\001\001\000\004" +
    "\043\251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\026\005\025\001\001\000\060" +
    "\004\035\006\067\007\030\010\052\011\045\012\027\013" +
    "\047\014\070\015\065\016\062\017\061\020\063\022\073" +
    "\024\043\026\072\034\051\035\040\036\037\037\036\040" +
    "\034\041\032\042\031\050\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\004\035\006" +
    "\247\010\245\011\045\012\027\013\047\014\070\015\065" +
    "\016\062\017\061\020\063\022\073\024\043\026\072\034" +
    "\051\035\040\036\037\037\036\040\034\041\032\042\031" +
    "\050\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\035\174\036\037\037\036\040\034\041\032" +
    "\042\031\050\100\001\001\000\006\022\170\026\167\001" +
    "\001\000\020\035\166\036\037\037\036\040\034\041\032" +
    "\042\031\050\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\034\155\035\040\036\037\037" +
    "\036\040\034\041\032\042\031\050\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\146\025\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\034\135\035\040\036\037\037\036" +
    "\040\034\041\032\042\031\050\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\034\077\035" +
    "\040\036\037\037\036\040\034\041\032\042\031\050\100" +
    "\001\001\000\006\023\112\025\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\035\110\036\037\037\036\040\034\041\032\042" +
    "\031\050\100\001\001\000\020\035\107\036\037\037\036" +
    "\040\034\041\032\042\031\050\100\001\001\000\020\035" +
    "\106\036\037\037\036\040\034\041\032\042\031\050\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\034\126\035\040\036\037\037\036\040\034" +
    "\041\032\042\031\044\127\050\100\001\001\000\004\025" +
    "\120\001\001\000\022\034\121\035\040\036\037\037\036" +
    "\040\034\041\032\042\031\050\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\117\025\114\001\001" +
    "\000\004\025\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\125" +
    "\025\114\001\001\000\004\025\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\034\133" +
    "\035\040\036\037\037\036\040\034\041\032\042\031\050" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\034" +
    "\140\035\040\036\037\037\036\040\034\041\032\042\031" +
    "\050\100\001\001\000\002\001\001\000\004\004\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\034\152\035\040\036\037\037\036\040\034\041" +
    "\032\042\031\050\100\001\001\000\004\025\120\001\001" +
    "\000\002\001\001\000\022\034\151\035\040\036\037\037" +
    "\036\040\034\041\032\042\031\050\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\034\154\035\040\036" +
    "\037\037\036\040\034\041\032\042\031\050\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\034\160\035\040\036\037\037\036\040\034\041\032" +
    "\042\031\050\100\001\001\000\002\001\001\000\004\004" +
    "\162\001\001\000\002\001\001\000\004\004\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\177\013\203\021\201\022\200\050\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\212\025\114\001\001\000\002\001\001" +
    "\000\022\034\205\035\040\036\037\037\036\040\034\041" +
    "\032\042\031\050\100\001\001\000\002\001\001\000\024" +
    "\013\210\034\211\035\040\036\037\037\036\040\034\041" +
    "\032\042\031\050\054\001\001\000\006\023\146\025\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\120\001\001\000\004\004\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\034\217\035\040\036\037\037" +
    "\036\040\034\041\032\042\031\050\100\001\001\000\002" +
    "\001\001\000\024\013\221\034\222\035\040\036\037\037" +
    "\036\040\034\041\032\042\031\050\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\037\232\040\034\041" +
    "\032\042\031\050\100\001\001\000\014\037\231\040\034" +
    "\041\032\042\031\050\100\001\001\000\014\037\230\040" +
    "\034\041\032\042\031\050\100\001\001\000\014\037\227" +
    "\040\034\041\032\042\031\050\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\041\242\042\031\050\100\001\001\000\010\041" +
    "\241\042\031\050\100\001\001\000\010\041\240\042\031" +
    "\050\100\001\001\000\014\037\237\040\034\041\032\042" +
    "\031\050\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\261\005\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\022\271\024\270\026\072\033\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\272\026\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\275\024\277" +
    "\026\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\300\026\167\001\001\000\002\001\001\000\004" +
    "\022\302\001\001\000\002\001\001\000\004\022\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\014\312\022\313\024\043\026" +
    "\072\047\314\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\315\022\313\024\043\026" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\015\027\325\030\012" +
    "\031\016\001\001\000\006\030\263\031\016\001\001\000" +
    "\054\004\035\010\245\011\045\012\027\013\047\014\070" +
    "\015\065\016\062\017\061\020\063\022\073\024\043\026" +
    "\072\034\051\035\040\036\037\037\036\040\034\041\032" +
    "\042\031\050\054\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuilder errorMessage = new StringBuilder("SYNTAX ERROR: ");
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.left >= 0) {
                errorMessage.append("line " + (s.left + 1));
                if (s.right >= 0) {
                    errorMessage.append(" column " + (s.right +1));
                }
            }
        }
        errorMessage.append("\n" + message);
        System.err.println(errorMessage);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= structs blocks 
            {
              Program RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<StructType> ss = (List<StructType>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Block> bs = (List<Block>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(bs, null, ss); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= structs blocks functions 
            {
              Program RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<StructType> ss = (List<StructType>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Block> bs = (List<Block>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Function> fs = (List<Function>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(bs, fs, ss); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= blocks 
            {
              Program RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Block> bs = (List<Block>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(bs, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= blocks functions 
            {
              Program RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Block> bs = (List<Block>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Function> fs = (List<Function>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(bs, fs, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= statements statement 
            {
              List<Statement> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> ss = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= statement 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                              ArrayList<Statement> ss = new ArrayList<Statement>();
                              ss.add(s);
                              RESULT = ss;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= basic_statement SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= complex_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComplexStatement s = (ComplexStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= block 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // basic_statement ::= assignment 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // basic_statement ::= declaration 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // basic_statement ::= mixed_basic 
            {
              Statement RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Mixed da = (Mixed)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = da; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // basic_statement ::= expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // complex_statement ::= if 
            {
              ComplexStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // complex_statement ::= while 
            {
              ComplexStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While w = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // complex_statement ::= for 
            {
              ComplexStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= type IDENT 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    RESULT = new Declaration(t,ident);
                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration ::= multi_array_integer type IDENT 
            {
              Declaration RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Integer> m = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    RESULT = new Declaration(new ArrayType(t.getType(),m), ident);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= IDENT IDENT 
            {
              Declaration RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    //identifier
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    //type
                    Identifier str = new Identifier(s);
                    ident.setRow(sleft);
                    ident.setColumn(sright);
                    //result
                    RESULT = new Declaration(str,ident);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration ::= multi_array_integer IDENT IDENT 
            {
              Declaration RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Integer> m = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    //identifier
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    //type
                    Identifier str = new Identifier(s);
                    ident.setRow(sleft);
                    ident.setColumn(sright);
                    //result
                    RESULT = new Declaration(str,m,ident);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assignment ::= IDENT multi_array EQ expression 
            {
              Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expression> ii = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   Identifier ident = new Identifier(i);
                   ident.setRow(ileft);
                   ident.setColumn(iright);
                   RESULT = new ArrayAssignment(ident,ii,e);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assignment ::= struct_member EQ expression 
            {
              Assignment RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Identifier> s = (List<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   StructMember m = new StructMember(s);
                   RESULT = new StructAssignment(m,e);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assignment ::= IDENT EQ expression 
            {
              Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   Identifier ident = new Identifier(i);
                   ident.setRow(ileft);
                   ident.setColumn(iright);
                   RESULT = new Assignment(ident,e);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // mixed_basic ::= type IDENT EQ expression 
            {
              Mixed RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    RESULT = new Mixed(t,ident,e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_basic",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression_tuple ::= expression_tuple COMMA expression 
            {
              List<Expression> RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expression> ee = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ee.add(e); RESULT = ee; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_tuple",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression_tuple ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         ArrayList<Expression> ee = new ArrayList<Expression>();
                         ee.add(e);
                         RESULT = ee;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_tuple",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // array ::= LBRACK expression RBRACK 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // array_integer ::= LBRACK INT RBRACK 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_integer",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // multi_array ::= multi_array array 
            {
              List<Expression> RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> ii = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ii.add(i); RESULT = ii; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_array",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // multi_array ::= array 
            {
              List<Expression> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ArrayList<Expression> ii = new ArrayList<Expression>();
                    ii.add(i);
                    RESULT = ii;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_array",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // multi_array_integer ::= multi_array_integer array_integer 
            {
              List<Integer> RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Integer> ii = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ii.add(i); RESULT = ii; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_array_integer",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // multi_array_integer ::= array_integer 
            {
              List<Integer> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ArrayList<Integer> ii = new ArrayList<Integer>();
                            ii.add(i);
                            RESULT = ii;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_array_integer",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= INTT 
            {
              Type RESULT =null;
		 RESULT = new Type(Types.INTEGER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type(Types.BOOLEAN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declarations ::= declarations declaration SEMICOLON 
            {
              List<Declaration> RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Declaration> dd = (List<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 dd.add(d); RESULT = dd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declarations ::= declaration SEMICOLON 
            {
              List<Declaration> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                     ArrayList<Declaration> dd = new ArrayList<Declaration>();
                     dd.add(d);
                     RESULT = dd;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // struct ::= IDENT DOTS EQ STRUCT LBRACE declarations RBRACE 
            {
              StructType RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Declaration> dd = (List<Declaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
               Identifier ident = new Identifier(i);
               ident.setRow(ileft);
               ident.setColumn(iright);
               RESULT = new StructType(ident, dd);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // structs ::= structs struct 
            {
              List<StructType> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<StructType> ss = (List<StructType>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructType s = (StructType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structs",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // structs ::= struct 
            {
              List<StructType> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructType s = (StructType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayList<StructType> ss = new ArrayList<StructType>();
                ss.add(s);
                RESULT = ss;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("structs",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if ::= IF LPAR expression RPAR block 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(e,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if ::= IF LPAR expression RPAR block ELSE block 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfElse(e, b1, b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // while ::= WHILE LPAR expression RPAR block 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(e,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // for ::= FOR LPAR for_tuple RPAR block 
            {
              For RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ForTuple f = (ForTuple)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(f,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // for_tuple ::= assignment SEMICOLON expression SEMICOLON assignment 
            {
              ForTuple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment l = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForTuple(a,e,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_tuple",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // for_tuple ::= mixed_basic SEMICOLON expression SEMICOLON assignment 
            {
              ForTuple RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Mixed da = (Mixed)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment l = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForTuple(da, e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_tuple",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // for_tuple ::= assignment SEMICOLON expression SEMICOLON expression 
            {
              ForTuple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForTuple(a,e,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_tuple",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // for_tuple ::= mixed_basic SEMICOLON expression SEMICOLON expression 
            {
              ForTuple RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Mixed da = (Mixed)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForTuple(da,e,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_tuple",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // return ::= RETURN expression SEMICOLON 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // block ::= LBRACE statements RBRACE 
            {
              Block RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> ss = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(ss); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // return_block ::= LBRACE statements return RBRACE 
            {
              ReturnBlock RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Statement> ss = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnBlock(ss,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // return_block ::= LBRACE return RBRACE 
            {
              ReturnBlock RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnBlock(null, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // blocks ::= blocks block 
            {
              List<Block> RESULT =null;
		int bbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Block> bb = (List<Block>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 bb.add(b); RESULT = bb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blocks",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // blocks ::= block 
            {
              List<Block> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               ArrayList<Block> bb = new ArrayList<Block>();
               bb.add(b);
               RESULT = bb;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blocks",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // function_head ::= IDENT DOTS type_cartesian MINUS GE type 
            {
              FunctionHead RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new FunctionHead(ident, tt, t);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_head",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // function_head ::= IDENT DOTS MINUS GE type 
            {
              FunctionHead RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new FunctionHead(ident, null, t);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_head",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function_head ::= IDENT DOTS MINUS GE 
            {
              FunctionHead RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new FunctionHead(ident, null, null);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_head",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // function_head ::= IDENT DOTS type_cartesian MINUS GE 
            {
              FunctionHead RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new FunctionHead(ident, tt, null);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_head",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // function_tail ::= LPAR ident_tuple RPAR VERT MINUS GE return_block 
            {
              FunctionTail RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Identifier> ii = (List<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnBlock b = (ReturnBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionTail(ii, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_tail",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // function_tail ::= VERT MINUS GE return_block 
            {
              FunctionTail RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnBlock b = (ReturnBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionTail(null, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_tail",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // function_tail ::= VERT MINUS GE block 
            {
              FunctionTail RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionTail(null, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_tail",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // function_tail ::= LPAR ident_tuple RPAR VERT MINUS GE block 
            {
              FunctionTail RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Identifier> ii = (List<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionTail(ii, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_tail",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // function ::= function_head function_tail 
            {
              Function RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionHead h = (FunctionHead)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionTail t = (FunctionTail)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Function(h,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ident_tuple ::= ident_tuple COMMA IDENT 
            {
              List<Identifier> RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Identifier> ii = (List<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    ii.add(ident); RESULT = ii;    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_tuple",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ident_tuple ::= IDENT 
            {
              List<Identifier> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    ArrayList<Identifier> ii = new ArrayList<Identifier>();
                    ii.add(ident);
                    RESULT = ii;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_tuple",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type_cartesian ::= type_cartesian X type 
            {
              List<Type> RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tt.add(t); RESULT = tt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type_cartesian ::= type 
            {
              List<Type> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       ArrayList<Type> tt = new ArrayList<Type>();
                       tt.add(t);
                       RESULT = tt;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type_cartesian ::= type_cartesian X multi_array_integer type 
            {
              List<Type> RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Integer> m = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       tt.add(new ArrayType(t.getType(), m));
                       RESULT = tt;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type_cartesian ::= multi_array_integer type 
            {
              List<Type> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Integer> m = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       ArrayList<Type> tt = new ArrayList<Type>();
                       tt.add(new ArrayType(t.getType(), m));
                       RESULT = tt;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type_cartesian ::= type_cartesian X IDENT 
            {
              List<Type> RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       Identifier ident = new Identifier(i);
                       ident.setRow(ileft);
                       ident.setColumn(iright);
                       tt.add(new StructType(ident));
                       RESULT = tt;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type_cartesian ::= IDENT 
            {
              List<Type> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       Identifier ident = new Identifier(i);
                       ident.setRow(ileft);
                       ident.setColumn(iright);
                       ArrayList<Type> tt = new ArrayList<Type>();
                       tt.add(new StructType(ident));
                       RESULT = tt;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // functions ::= functions function 
            {
              List<Function> RESULT =null;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Function> ff = (List<Function>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ff.add(f); RESULT = ff; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // functions ::= function 
            {
              List<Function> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ArrayList<Function> ff = new ArrayList<Function>();
                  ff.add(f);
                  RESULT = ff; 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // struct_member ::= struct_member DOT IDENT 
            {
              List<Identifier> RESULT =null;
		int mmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Identifier> mm = (List<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      mm.add(ident);
                      RESULT = mm;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_member",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // struct_member ::= IDENT DOT IDENT 
            {
              List<Identifier> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      Identifier ident1 = new Identifier(a);
                      ident1.setRow(aleft);
                      ident1.setColumn(aright);
                      Identifier ident2 = new Identifier(b);
                      ident2.setRow(bleft);
                      ident2.setColumn(bright);
                      ArrayList<Identifier> ii = new ArrayList<Identifier>();
                      ii.add(ident1);
                      ii.add(ident2);
                      RESULT = ii;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_member",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // struct_member ::= IDENT multi_array DOT IDENT 
            {
              List<Identifier> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expression> m = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      ArrayIdentifier ident1 = new ArrayIdentifier(a,m);
                      ident1.setRow(aleft);
                      ident1.setColumn(aright);
                      Identifier ident2 = new Identifier(b);
                      ident2.setRow(bleft);
                      ident2.setColumn(bright);
                      ArrayList<Identifier> ii = new ArrayList<Identifier>();
                      ii.add(ident1);
                      ii.add(ident2);
                      RESULT = ii;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_member",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // struct_member ::= IDENT DOT IDENT multi_array 
            {
              List<Identifier> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expression> m = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      Identifier ident1 = new Identifier(a);
                      ident1.setRow(aleft);
                      ident1.setColumn(aright);
                      ArrayIdentifier ident2 = new ArrayIdentifier(b,m);
                      ident2.setRow(bleft);
                      ident2.setColumn(bright);
                      ArrayList<Identifier> ii = new ArrayList<Identifier>();
                      ii.add(ident1);
                      ii.add(ident2);
                      RESULT = ii;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_member",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // struct_member ::= IDENT multi_array DOT IDENT multi_array 
            {
              List<Identifier> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Expression> m = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expression> n = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      ArrayIdentifier ident1 = new ArrayIdentifier(a,m);
                      ident1.setRow(aleft);
                      ident1.setColumn(aright);
                      ArrayIdentifier ident2 = new ArrayIdentifier(b,n);
                      ident2.setRow(bleft);
                      ident2.setColumn(bright);
                      ArrayList<Identifier> ii = new ArrayList<Identifier>();
                      ii.add(ident1);
                      ii.add(ident2);
                      RESULT = ii;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_member",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression PLUS expression_p1 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.PLUS,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression MINUS expression_p1 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.MINUS,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression OR expression_p1 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.OR,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression_p1 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression_p1 ::= MINUS expression_p1 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOperators.UNARY_MINUS,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression_p1 ::= NOT expression_p1 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOperators.NOT,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression_p1 ::= expression_p2 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression_p2 ::= expression_p2 TIMES expression_p3 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.PRODUCT,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression_p2 ::= expression_p2 DIV expression_p3 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.DIV,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression_p2 ::= expression_p2 MOD expression_p3 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.MODULUS,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression_p2 ::= expression_p2 AND expression_p3 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.AND,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression_p2 ::= expression_p3 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression_p3 ::= expression_p4 EXP expression_p3 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.EXPONENTIAL,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression_p3 ::= expression_p4 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression_p4 ::= expression_p4 GE expression_p5 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.GREATER,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p4",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression_p4 ::= expression_p4 LE expression_p5 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.LOWER,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p4",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression_p4 ::= expression_p4 EQQ expression_p5 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.EQUALS,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p4",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression_p4 ::= expression_p5 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p4",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression_p5 ::= expression_p6 PPLUS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UnaryExpression(UnaryOperators.PLUS_PLUS,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p5",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression_p5 ::= expression_p6 MMINUS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UnaryExpression(UnaryOperators.MINUS_MINUS,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p5",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression_p5 ::= expression_p6 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p5",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression_p6 ::= INT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                      DummyInteger integ = new DummyInteger(i);
                      integ.setRow(ileft);
                      integ.setColumn(iright);
                      RESULT = integ;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression_p6 ::= TRUE 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      DummyBoolean b = new DummyBoolean(true);
                      b.setRow(ileft);
                      b.setColumn(iright);
                      RESULT = b;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression_p6 ::= FALSE 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean i = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      DummyBoolean b = new DummyBoolean(false);
                      b.setRow(ileft);
                      b.setColumn(iright);
                      RESULT = b;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression_p6 ::= IDENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = ident;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression_p6 ::= IDENT LPAR expression_tuple RPAR 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> ee = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new Call(ident, ee);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression_p6 ::= IDENT LPAR RPAR 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new Call(ident, null);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression_p6 ::= struct_member 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Identifier> m = (List<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      RESULT = new StructMember(m);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression_p6 ::= IDENT multi_array 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expression> ii = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      Identifier ident = new ArrayIdentifier(i,ii);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = ident;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression_p6 ::= LPAR expression RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
