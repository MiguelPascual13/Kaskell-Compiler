
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package kaskell;

import java.util.ArrayList;
import java.util.List;
import expressions.*;
import functions.*;
import statements.*;
import types.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\007\004\000\002\007\003\000\002\010\004" +
    "\000\002\010\003\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\014" +
    "\004\000\002\014\005\000\002\013\006\000\002\013\005" +
    "\000\002\012\006\000\002\044\005\000\002\044\003\000" +
    "\002\025\005\000\002\026\005\000\002\023\004\000\002" +
    "\023\003\000\002\024\004\000\002\024\003\000\002\022" +
    "\003\000\002\022\003\000\002\016\007\000\002\016\011" +
    "\000\002\017\007\000\002\020\007\000\002\021\007\000" +
    "\002\021\007\000\002\021\007\000\002\021\007\000\002" +
    "\006\005\000\002\004\005\000\002\005\006\000\002\005" +
    "\005\000\002\003\004\000\002\003\003\000\002\031\010" +
    "\000\002\031\007\000\002\031\006\000\002\031\007\000" +
    "\002\032\011\000\002\032\006\000\002\032\006\000\002" +
    "\032\011\000\002\030\004\000\002\043\005\000\002\043" +
    "\003\000\002\033\005\000\002\033\003\000\002\033\006" +
    "\000\002\033\004\000\002\027\004\000\002\027\003\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\003\000\002\035\004\000\002\035\004\000\002\035" +
    "\003\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\003\000\002\037\005\000" +
    "\002\037\003\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\003\000\002\041\004\000\002\041" +
    "\004\000\002\041\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\006\000" +
    "\002\042\005\000\002\042\004\000\002\042\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\004\004\004\001\002\000\036\004\004\011" +
    "\037\021\063\023\055\026\054\027\044\032\046\034\061" +
    "\035\036\044\042\045\053\046\031\047\052\050\066\001" +
    "\002\000\004\002\260\001\002\000\010\002\uffd6\004\uffd6" +
    "\045\uffd6\001\002\000\010\002\000\004\004\045\011\001" +
    "\002\000\006\002\uffc5\045\uffc5\001\002\000\004\016\241" +
    "\001\002\000\006\002\uffff\045\011\001\002\000\006\017" +
    "\016\021\015\001\002\000\010\002\uffd7\004\uffd7\045\uffd7" +
    "\001\002\000\004\045\227\001\002\000\004\011\020\001" +
    "\002\000\006\002\uffcd\045\uffcd\001\002\000\004\014\021" +
    "\001\002\000\004\004\022\001\002\000\040\004\004\011" +
    "\037\021\063\023\055\026\054\027\044\030\051\032\046" +
    "\034\061\035\036\044\042\045\053\046\031\047\052\050" +
    "\066\001\002\000\006\002\uffd0\045\uffd0\001\002\000\006" +
    "\002\uffcf\045\uffcf\001\002\000\004\007\ufff7\001\002\000" +
    "\042\004\004\005\223\011\037\021\063\023\055\026\054" +
    "\027\044\030\051\032\046\034\061\035\036\044\042\045" +
    "\053\046\031\047\052\050\066\001\002\000\044\007\uffb0" +
    "\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\020" +
    "\uffb0\022\uffb0\024\uffb0\025\uffb0\036\uffb0\037\uffb0\040\uffb0" +
    "\041\220\042\221\043\uffb0\001\002\000\040\007\uffb3\010" +
    "\uffb3\011\uffb3\012\uffb3\013\uffb3\014\uffb3\015\uffb3\020\uffb3" +
    "\022\uffb3\024\uffb3\025\uffb3\036\uffb3\037\uffb3\040\uffb3\043" +
    "\uffb3\001\002\000\044\007\uffaf\010\uffaf\011\uffaf\012\uffaf" +
    "\013\uffaf\014\uffaf\015\uffaf\020\uffaf\022\uffaf\024\uffaf\025" +
    "\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\001\002\000\040\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\014\212\015\211\020\213\022\uffb7\024\uffb7\025\uffb7" +
    "\036\uffb7\037\uffb7\040\uffb7\043\210\001\002\000\030\007" +
    "\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\022\uffb9\024\uffb9" +
    "\025\uffb9\036\uffb9\037\uffb9\040\uffb9\001\002\000\042\004" +
    "\ufffa\005\ufffa\011\ufffa\021\ufffa\023\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\032\ufffa\034\ufffa\035\ufffa\044\ufffa\045\ufffa\046" +
    "\ufffa\047\ufffa\050\ufffa\001\002\000\030\007\uffbe\010\uffbe" +
    "\011\uffbe\012\203\013\202\022\uffbe\024\uffbe\025\uffbe\036" +
    "\uffbe\037\201\040\200\001\002\000\004\021\154\001\002" +
    "\000\020\011\037\021\063\044\042\045\073\046\031\047" +
    "\052\050\066\001\002\000\020\007\uffc1\010\uffc1\011\uffc1" +
    "\022\uffc1\024\uffc1\025\uffc1\036\uffc1\001\002\000\010\023" +
    "\055\026\054\027\044\001\002\000\020\011\037\021\063" +
    "\044\042\045\073\046\031\047\052\050\066\001\002\000" +
    "\004\007\146\001\002\000\014\011\uffe4\017\uffe4\021\uffe4" +
    "\031\uffe4\045\uffe4\001\002\000\004\007\ufff9\001\002\000" +
    "\004\021\140\001\002\000\012\007\ufff6\010\075\011\076" +
    "\036\077\001\002\000\042\004\ufffd\005\ufffd\011\ufffd\021" +
    "\ufffd\023\ufffd\026\ufffd\027\ufffd\030\ufffd\032\ufffd\034\ufffd" +
    "\035\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\001" +
    "\002\000\020\011\037\021\063\044\042\045\073\046\031" +
    "\047\052\050\066\001\002\000\044\007\uffae\010\uffae\011" +
    "\uffae\012\uffae\013\uffae\014\uffae\015\uffae\020\uffae\022\uffae" +
    "\024\uffae\025\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\001\002\000\046\006\131\007\uffac\010\uffac" +
    "\011\uffac\012\uffac\013\uffac\014\uffac\015\uffac\020\uffac\021" +
    "\103\022\uffac\023\105\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\001\002\000\014\011\uffe5\017\uffe5\021" +
    "\uffe5\031\uffe5\045\uffe5\001\002\000\004\046\127\001\002" +
    "\000\042\004\ufff4\005\ufff4\011\ufff4\021\ufff4\023\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\032\ufff4\034\ufff4\035\ufff4\044\ufff4" +
    "\045\ufff4\046\ufff4\047\ufff4\050\ufff4\001\002\000\042\004" +
    "\ufff5\005\ufff5\011\ufff5\021\ufff5\023\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\032\ufff5\034\ufff5\035\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\001\002\000\042\004\ufff3\005\ufff3" +
    "\011\ufff3\021\ufff3\023\ufff3\026\ufff3\027\ufff3\030\ufff3\032" +
    "\ufff3\034\ufff3\035\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3" +
    "\050\ufff3\001\002\000\004\021\123\001\002\000\042\004" +
    "\ufffb\005\ufffb\011\ufffb\021\ufffb\023\ufffb\026\ufffb\027\ufffb" +
    "\030\ufffb\032\ufffb\034\ufffb\035\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\001\002\000\020\011\037\021\063" +
    "\044\042\045\073\046\031\047\052\050\066\001\002\000" +
    "\004\007\ufff8\001\002\000\004\005\120\001\002\000\044" +
    "\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015" +
    "\uffad\020\uffad\022\uffad\024\uffad\025\uffad\036\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\001\002\000\010\023" +
    "\uffe6\026\uffe6\027\uffe6\001\002\000\004\045\071\001\002" +
    "\000\006\006\072\007\ufff2\001\002\000\020\011\037\021" +
    "\063\044\042\045\073\046\031\047\052\050\066\001\002" +
    "\000\050\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014" +
    "\uffac\015\uffac\020\uffac\021\103\022\uffac\023\105\024\uffac" +
    "\025\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043" +
    "\uffac\001\002\000\012\007\uffee\010\075\011\076\036\077" +
    "\001\002\000\020\011\037\021\063\044\042\045\073\046" +
    "\031\047\052\050\066\001\002\000\020\011\037\021\063" +
    "\044\042\045\073\046\031\047\052\050\066\001\002\000" +
    "\020\011\037\021\063\044\042\045\073\046\031\047\052" +
    "\050\066\001\002\000\020\007\uffc2\010\uffc2\011\uffc2\022" +
    "\uffc2\024\uffc2\025\uffc2\036\uffc2\001\002\000\020\007\uffc3" +
    "\010\uffc3\011\uffc3\022\uffc3\024\uffc3\025\uffc3\036\uffc3\001" +
    "\002\000\020\007\uffc4\010\uffc4\011\uffc4\022\uffc4\024\uffc4" +
    "\025\uffc4\036\uffc4\001\002\000\022\011\037\021\063\022" +
    "\114\044\042\045\073\046\031\047\052\050\066\001\002" +
    "\000\046\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014" +
    "\uffa9\015\uffa9\020\uffa9\022\uffa9\023\105\024\uffa9\025\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\001" +
    "\002\000\020\011\037\021\063\044\042\045\073\046\031" +
    "\047\052\050\066\001\002\000\050\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\020\uffe8" +
    "\022\uffe8\023\uffe8\024\uffe8\025\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\043\uffe8\001\002\000\012\010\075" +
    "\011\076\024\110\036\077\001\002\000\050\006\uffeb\007" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\020\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\001\002\000\050" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\020\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\001" +
    "\002\000\014\010\075\011\076\022\uffec\025\uffec\036\077" +
    "\001\002\000\006\022\116\025\115\001\002\000\044\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa" +
    "\020\uffaa\022\uffaa\024\uffaa\025\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\041\uffaa\042\uffaa\043\uffaa\001\002\000\020\011\037" +
    "\021\063\044\042\045\073\046\031\047\052\050\066\001" +
    "\002\000\044\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab" +
    "\014\uffab\015\uffab\020\uffab\022\uffab\024\uffab\025\uffab\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\001\002" +
    "\000\014\010\075\011\076\022\uffed\025\uffed\036\077\001" +
    "\002\000\006\002\uffd8\045\uffd8\001\002\000\012\010\075" +
    "\011\076\022\122\036\077\001\002\000\044\007\uffa8\010" +
    "\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\020\uffa8" +
    "\022\uffa8\024\uffa8\025\uffa8\036\uffa8\037\uffa8\040\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\001\002\000\020\011\037\021\063" +
    "\044\042\045\073\046\031\047\052\050\066\001\002\000" +
    "\012\010\075\011\076\022\125\036\077\001\002\000\004" +
    "\004\004\001\002\000\042\004\uffe1\005\uffe1\011\uffe1\021" +
    "\uffe1\023\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1\034\uffe1" +
    "\035\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\001" +
    "\002\000\004\024\130\001\002\000\010\023\uffea\026\uffea" +
    "\027\uffea\001\002\000\020\011\037\021\063\044\042\045" +
    "\073\046\031\047\052\050\066\001\002\000\044\006\133" +
    "\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\020\uffa9\022\uffa9\023\105\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\001\002\000\020\011\037\021" +
    "\063\044\042\045\073\046\031\047\052\050\066\001\002" +
    "\000\014\007\ufff0\010\075\011\076\022\ufff0\036\077\001" +
    "\002\000\014\007\uffef\010\075\011\076\022\uffef\036\077" +
    "\001\002\000\012\007\137\010\075\011\076\036\077\001" +
    "\002\000\004\005\uffdb\001\002\000\020\011\037\021\063" +
    "\044\042\045\073\046\031\047\052\050\066\001\002\000" +
    "\012\010\075\011\076\022\142\036\077\001\002\000\004" +
    "\004\004\001\002\000\044\004\uffe3\005\uffe3\011\uffe3\021" +
    "\uffe3\023\uffe3\026\uffe3\027\uffe3\030\uffe3\032\uffe3\033\144" +
    "\034\uffe3\035\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050" +
    "\uffe3\001\002\000\004\004\004\001\002\000\042\004\uffe2" +
    "\005\uffe2\011\uffe2\021\uffe2\023\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\032\uffe2\034\uffe2\035\uffe2\044\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\001\002\000\042\004\ufffc\005\ufffc\011" +
    "\ufffc\021\ufffc\023\ufffc\026\ufffc\027\ufffc\030\ufffc\032\ufffc" +
    "\034\ufffc\035\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050" +
    "\ufffc\001\002\000\020\007\uffbf\010\uffbf\011\uffbf\022\uffbf" +
    "\024\uffbf\025\uffbf\036\uffbf\001\002\000\010\023\uffe7\026" +
    "\uffe7\027\uffe7\001\002\000\004\045\152\001\002\000\004" +
    "\007\ufff1\001\002\000\020\007\uffc0\010\uffc0\011\uffc0\022" +
    "\uffc0\024\uffc0\025\uffc0\036\uffc0\001\002\000\010\026\054" +
    "\027\044\045\160\001\002\000\004\007\173\001\002\000" +
    "\004\045\172\001\002\000\004\022\170\001\002\000\006" +
    "\006\131\023\105\001\002\000\004\007\162\001\002\000" +
    "\020\011\037\021\063\044\042\045\073\046\031\047\052" +
    "\050\066\001\002\000\012\007\164\010\075\011\076\036" +
    "\077\001\002\000\020\011\037\021\063\044\042\045\053" +
    "\046\031\047\052\050\066\001\002\000\004\022\uffdf\001" +
    "\002\000\012\010\075\011\076\022\uffdd\036\077\001\002" +
    "\000\006\006\133\023\105\001\002\000\004\004\004\001" +
    "\002\000\042\004\uffe0\005\uffe0\011\uffe0\021\uffe0\023\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\032\uffe0\034\uffe0\035\uffe0\044" +
    "\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\001\002\000\004" +
    "\006\072\001\002\000\020\011\037\021\063\044\042\045" +
    "\073\046\031\047\052\050\066\001\002\000\012\007\175" +
    "\010\075\011\076\036\077\001\002\000\020\011\037\021" +
    "\063\044\042\045\053\046\031\047\052\050\066\001\002" +
    "\000\004\022\uffde\001\002\000\012\010\075\011\076\022" +
    "\uffdc\036\077\001\002\000\014\021\063\045\073\046\031" +
    "\047\052\050\066\001\002\000\014\021\063\045\073\046" +
    "\031\047\052\050\066\001\002\000\014\021\063\045\073" +
    "\046\031\047\052\050\066\001\002\000\014\021\063\045" +
    "\073\046\031\047\052\050\066\001\002\000\030\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\013\uffbd\022\uffbd\024\uffbd\025" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\001\002\000\030\007\uffbc" +
    "\010\uffbc\011\uffbc\012\uffbc\013\uffbc\022\uffbc\024\uffbc\025" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\001\002\000\030\007\uffba" +
    "\010\uffba\011\uffba\012\uffba\013\uffba\022\uffba\024\uffba\025" +
    "\uffba\036\uffba\037\uffba\040\uffba\001\002\000\030\007\uffbb" +
    "\010\uffbb\011\uffbb\012\uffbb\013\uffbb\022\uffbb\024\uffbb\025" +
    "\uffbb\036\uffbb\037\uffbb\040\uffbb\001\002\000\014\021\063" +
    "\045\073\046\031\047\052\050\066\001\002\000\014\021" +
    "\063\045\073\046\031\047\052\050\066\001\002\000\014" +
    "\021\063\045\073\046\031\047\052\050\066\001\002\000" +
    "\014\021\063\045\073\046\031\047\052\050\066\001\002" +
    "\000\030\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\022" +
    "\uffb8\024\uffb8\025\uffb8\036\uffb8\037\uffb8\040\uffb8\001\002" +
    "\000\040\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\020\uffb6\022\uffb6\024\uffb6\025\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\043\uffb6\001\002\000\040\007\uffb5\010" +
    "\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\020\uffb5" +
    "\022\uffb5\024\uffb5\025\uffb5\036\uffb5\037\uffb5\040\uffb5\043" +
    "\uffb5\001\002\000\040\007\uffb4\010\uffb4\011\uffb4\012\uffb4" +
    "\013\uffb4\014\uffb4\015\uffb4\020\uffb4\022\uffb4\024\uffb4\025" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\043\uffb4\001\002\000\040" +
    "\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015" +
    "\uffb2\020\uffb2\022\uffb2\024\uffb2\025\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\043\uffb2\001\002\000\040\007\uffb1\010\uffb1\011" +
    "\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\020\uffb1\022\uffb1" +
    "\024\uffb1\025\uffb1\036\uffb1\037\uffb1\040\uffb1\043\uffb1\001" +
    "\002\000\042\004\ufffe\005\ufffe\011\ufffe\021\ufffe\023\ufffe" +
    "\026\ufffe\027\ufffe\030\ufffe\032\ufffe\034\ufffe\035\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\001\002\000\046" +
    "\002\uffda\004\uffda\005\uffda\011\uffda\021\uffda\023\uffda\026" +
    "\uffda\027\uffda\030\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\001\002\000" +
    "\004\005\225\001\002\000\006\002\uffd9\045\uffd9\001\002" +
    "\000\006\022\231\025\230\001\002\000\006\022\uffcb\025" +
    "\uffcb\001\002\000\004\045\237\001\002\000\004\017\232" +
    "\001\002\000\004\011\233\001\002\000\004\014\234\001" +
    "\002\000\004\004\022\001\002\000\006\002\uffd1\045\uffd1" +
    "\001\002\000\006\002\uffce\045\uffce\001\002\000\006\022" +
    "\uffcc\025\uffcc\001\002\000\006\002\uffc6\045\uffc6\001\002" +
    "\000\012\011\244\023\055\026\054\027\044\001\002\000" +
    "\006\011\251\031\252\001\002\000\006\011\uffc9\031\uffc9" +
    "\001\002\000\004\014\247\001\002\000\010\023\055\026" +
    "\054\027\044\001\002\000\006\011\uffc7\031\uffc7\001\002" +
    "\000\012\017\uffd3\021\uffd3\026\054\027\044\001\002\000" +
    "\006\017\uffd4\021\uffd4\001\002\000\004\014\256\001\002" +
    "\000\010\023\055\026\054\027\044\001\002\000\006\011" +
    "\uffca\031\uffca\001\002\000\010\023\055\026\054\027\044" +
    "\001\002\000\006\011\uffc8\031\uffc8\001\002\000\012\017" +
    "\uffd2\021\uffd2\026\054\027\044\001\002\000\006\017\uffd5" +
    "\021\uffd5\001\002\000\004\002\001\001\002\000\040\004" +
    "\004\005\223\011\037\021\063\023\055\026\054\027\044" +
    "\032\046\034\061\035\036\044\042\045\053\046\031\047" +
    "\052\050\066\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\010\002\004\003\006\004\005\001\001\000" +
    "\054\004\033\007\260\010\047\011\042\012\024\013\044" +
    "\014\063\015\061\016\056\017\055\020\057\022\067\024" +
    "\040\026\066\034\046\035\037\036\034\037\032\040\031" +
    "\041\027\042\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\013\027\011\030\007\031\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\030\237\031" +
    "\012\001\001\000\004\032\016\001\001\000\002\001\001" +
    "\000\004\043\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\023\005\022\001\001" +
    "\000\056\004\033\006\064\007\025\010\047\011\042\012" +
    "\024\013\044\014\063\015\061\016\056\017\055\020\057" +
    "\022\067\024\040\026\066\034\046\035\037\036\034\037" +
    "\032\040\031\041\027\042\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\004\033\006" +
    "\223\010\221\011\042\012\024\013\044\014\063\015\061" +
    "\016\056\017\055\020\057\022\067\024\040\026\066\034" +
    "\046\035\037\036\034\037\032\040\031\041\027\042\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\035\152\036" +
    "\034\037\032\040\031\041\027\042\026\001\001\000\002" +
    "\001\001\000\006\022\150\026\147\001\001\000\016\035" +
    "\146\036\034\037\032\040\031\041\027\042\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\034\135\035\037\036\034\037\032\040\031\041\027\042" +
    "\026\001\001\000\002\001\001\000\006\023\131\025\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\034\120\035\037\036\034\037" +
    "\032\040\031\041\027\042\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\034\073\035\037" +
    "\036\034\037\032\040\031\041\027\042\026\001\001\000" +
    "\006\023\103\025\105\001\001\000\002\001\001\000\016" +
    "\035\101\036\034\037\032\040\031\041\027\042\026\001" +
    "\001\000\016\035\100\036\034\037\032\040\031\041\027" +
    "\042\026\001\001\000\016\035\077\036\034\037\032\040" +
    "\031\041\027\042\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\034\111\035\037\036" +
    "\034\037\032\040\031\041\027\042\026\044\112\001\001" +
    "\000\004\025\110\001\001\000\020\034\106\035\037\036" +
    "\034\037\032\040\031\041\027\042\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\034\116\035\037\036\034\037\032\040\031\041" +
    "\027\042\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\034\123\035\037\036\034\037\032\040\031\041\027" +
    "\042\026\001\001\000\002\001\001\000\004\004\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\034\134\035\037\036\034\037\032\040\031\041" +
    "\027\042\026\001\001\000\004\025\110\001\001\000\020" +
    "\034\133\035\037\036\034\037\032\040\031\041\027\042" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\034\140\035\037\036" +
    "\034\037\032\040\031\041\027\042\026\001\001\000\002" +
    "\001\001\000\004\004\142\001\001\000\002\001\001\000" +
    "\004\004\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\154\013\160" +
    "\021\156\022\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\166\025\105\001\001" +
    "\000\002\001\001\000\020\034\162\035\037\036\034\037" +
    "\032\040\031\041\027\042\026\001\001\000\002\001\001" +
    "\000\022\013\164\034\165\035\037\036\034\037\032\040" +
    "\031\041\027\042\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\110\001\001\000\004\004\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\034\173" +
    "\035\037\036\034\037\032\040\031\041\027\042\026\001" +
    "\001\000\002\001\001\000\022\013\175\034\176\035\037" +
    "\036\034\037\032\040\031\041\027\042\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\037\206\040\031" +
    "\041\027\042\026\001\001\000\012\037\205\040\031\041" +
    "\027\042\026\001\001\000\012\037\204\040\031\041\027" +
    "\042\026\001\001\000\012\037\203\040\031\041\027\042" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\216\042\026\001" +
    "\001\000\006\041\215\042\026\001\001\000\006\041\214" +
    "\042\026\001\001\000\012\037\213\040\031\041\027\042" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\235\005\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\022\242\024\244\026\066\033\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\245\026\147\001\001\000\002\001\001\000\004\022" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\252\024\253\026\066\001\001\000\002\001\001\000" +
    "\006\022\254\026\147\001\001\000\002\001\001\000\004" +
    "\022\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\004\033\010\221\011\042\012\024\013\044\014\063" +
    "\015\061\016\056\017\055\020\057\022\067\024\040\026" +
    "\066\034\046\035\037\036\034\037\032\040\031\041\027" +
    "\042\026\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuilder errorMessage = new StringBuilder("SYNTAX ERROR: ");
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            if (s.left >= 0) {
                errorMessage.append("line " + (s.left + 1));
                if (s.right >= 0) {
                    errorMessage.append(" column " + (s.right +1));
                }
            }
        }
        errorMessage.append("\n" + message);
        System.err.println(errorMessage);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= blocks 
            {
              Program RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Block> bs = (List<Block>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(bs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= blocks functions 
            {
              Program RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Block> bs = (List<Block>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Function> fs = (List<Function>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(bs, fs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statements statement 
            {
              List<Statement> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> ss = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= statement 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                              ArrayList<Statement> ss = new ArrayList<Statement>();
                              ss.add(s);
                              RESULT = ss;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= basic_statement SEMICOLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= complex_statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComplexStatement s = (ComplexStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= block 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // basic_statement ::= assignment 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // basic_statement ::= declaration 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // basic_statement ::= mixed_basic 
            {
              Statement RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Mixed da = (Mixed)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = da; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // basic_statement ::= expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // complex_statement ::= if 
            {
              ComplexStatement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // complex_statement ::= while 
            {
              ComplexStatement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		While w = (While)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = w; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // complex_statement ::= for 
            {
              ComplexStatement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaration ::= type IDENT 
            {
              Declaration RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    RESULT = new Declaration(t,ident);
                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration ::= multi_array_integer type IDENT 
            {
              Declaration RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Integer> m = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    RESULT = new Declaration(new ArrayType(t.getType(),m), ident);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // assignment ::= IDENT multi_array EQ expression 
            {
              Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expression> ii = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   Identifier ident = new Identifier(i);
                   ident.setRow(ileft);
                   ident.setColumn(iright);
                   RESULT = new ArrayAssignment(ident,ii,e);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // assignment ::= IDENT EQ expression 
            {
              Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   Identifier ident = new Identifier(i);
                   ident.setRow(ileft);
                   ident.setColumn(iright);
                   RESULT = new Assignment(ident,e);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // mixed_basic ::= type IDENT EQ expression 
            {
              Mixed RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    RESULT = new Mixed(t,ident,e);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mixed_basic",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression_tuple ::= expression_tuple COMMA expression 
            {
              List<Expression> RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expression> ee = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ee.add(e); RESULT = ee; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_tuple",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression_tuple ::= expression 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         ArrayList<Expression> ee = new ArrayList<Expression>();
                         ee.add(e);
                         RESULT = ee;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_tuple",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // array ::= LBRACK expression RBRACK 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // array_integer ::= LBRACK INT RBRACK 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_integer",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // multi_array ::= multi_array array 
            {
              List<Expression> RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> ii = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ii.add(i); RESULT = ii; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_array",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // multi_array ::= array 
            {
              List<Expression> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ArrayList<Expression> ii = new ArrayList<Expression>();
                    ii.add(i);
                    RESULT = ii;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_array",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // multi_array_integer ::= multi_array_integer array_integer 
            {
              List<Integer> RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Integer> ii = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ii.add(i); RESULT = ii; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_array_integer",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // multi_array_integer ::= array_integer 
            {
              List<Integer> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            ArrayList<Integer> ii = new ArrayList<Integer>();
                            ii.add(i);
                            RESULT = ii;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_array_integer",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type ::= INTT 
            {
              Type RESULT =null;
		 RESULT = new Type(Types.INTEGER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = new Type(Types.BOOLEAN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // if ::= IF LPAR expression RPAR block 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(e,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // if ::= IF LPAR expression RPAR block ELSE block 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfElse(e, b1, b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // while ::= WHILE LPAR expression RPAR block 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(e,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // for ::= FOR LPAR for_tuple RPAR block 
            {
              For RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ForTuple f = (ForTuple)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(f,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // for_tuple ::= assignment SEMICOLON expression SEMICOLON assignment 
            {
              ForTuple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment l = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForTuple(a,e,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_tuple",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // for_tuple ::= mixed_basic SEMICOLON expression SEMICOLON assignment 
            {
              ForTuple RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Mixed da = (Mixed)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Assignment l = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForTuple(da, e, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_tuple",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // for_tuple ::= assignment SEMICOLON expression SEMICOLON expression 
            {
              ForTuple RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForTuple(a,e,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_tuple",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // for_tuple ::= mixed_basic SEMICOLON expression SEMICOLON expression 
            {
              ForTuple RESULT =null;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Mixed da = (Mixed)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForTuple(da,e,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_tuple",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // return ::= RETURN expression SEMICOLON 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // block ::= LBRACE statements RBRACE 
            {
              Block RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> ss = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(ss); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // return_block ::= LBRACE statements return RBRACE 
            {
              ReturnBlock RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Statement> ss = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnBlock(ss,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // return_block ::= LBRACE return RBRACE 
            {
              ReturnBlock RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnBlock(null, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // blocks ::= blocks block 
            {
              List<Block> RESULT =null;
		int bbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Block> bb = (List<Block>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 bb.add(b); RESULT = bb; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blocks",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // blocks ::= block 
            {
              List<Block> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
               ArrayList<Block> bb = new ArrayList<Block>();
               bb.add(b);
               RESULT = bb;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("blocks",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_head ::= IDENT DOTS type_cartesian MINUS GE type 
            {
              FunctionHead RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new FunctionHead(ident, tt, t);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_head",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_head ::= IDENT DOTS MINUS GE type 
            {
              FunctionHead RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new FunctionHead(ident, null, t);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_head",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_head ::= IDENT DOTS MINUS GE 
            {
              FunctionHead RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new FunctionHead(ident, null, null);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_head",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_head ::= IDENT DOTS type_cartesian MINUS GE 
            {
              FunctionHead RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new FunctionHead(ident, tt, null);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_head",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // function_tail ::= LPAR ident_tuple RPAR VERT MINUS GE return_block 
            {
              FunctionTail RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Identifier> ii = (List<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnBlock b = (ReturnBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionTail(ii, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_tail",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // function_tail ::= VERT MINUS GE return_block 
            {
              FunctionTail RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnBlock b = (ReturnBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionTail(null, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_tail",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function_tail ::= VERT MINUS GE block 
            {
              FunctionTail RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionTail(null, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_tail",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // function_tail ::= LPAR ident_tuple RPAR VERT MINUS GE block 
            {
              FunctionTail RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<Identifier> ii = (List<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionTail(ii, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_tail",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // function ::= function_head function_tail 
            {
              Function RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionHead h = (FunctionHead)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionTail t = (FunctionTail)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Function(h,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ident_tuple ::= ident_tuple COMMA IDENT 
            {
              List<Identifier> RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Identifier> ii = (List<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    ii.add(ident); RESULT = ii;    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_tuple",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ident_tuple ::= IDENT 
            {
              List<Identifier> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Identifier ident = new Identifier(i);
                    ident.setRow(ileft);
                    ident.setColumn(iright);
                    ArrayList<Identifier> ii = new ArrayList<Identifier>();
                    ii.add(ident);
                    RESULT = ii;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_tuple",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type_cartesian ::= type_cartesian X type 
            {
              List<Type> RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tt.add(t); RESULT = tt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type_cartesian ::= type 
            {
              List<Type> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       ArrayList<Type> tt = new ArrayList<Type>();
                       tt.add(t);
                       RESULT = tt;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type_cartesian ::= type_cartesian X multi_array_integer type 
            {
              List<Type> RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Type> tt = (List<Type>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Integer> m = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       tt.add(new ArrayType(t.getType(), m));
                       RESULT = tt;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type_cartesian ::= multi_array_integer type 
            {
              List<Type> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Integer> m = (List<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                       ArrayList<Type> tt = new ArrayList<Type>();
                       tt.add(new ArrayType(t.getType(), m));
                       RESULT = tt;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // functions ::= functions function 
            {
              List<Function> RESULT =null;
		int ffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Function> ff = (List<Function>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ff.add(f); RESULT = ff; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // functions ::= function 
            {
              List<Function> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ArrayList<Function> ff = new ArrayList<Function>();
                  ff.add(f);
                  RESULT = ff; 
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression PLUS expression_p1 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.PLUS,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= expression MINUS expression_p1 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.MINUS,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression OR expression_p1 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.OR,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= expression_p1 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression_p1 ::= MINUS expression_p1 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOperators.UNARY_MINUS,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression_p1 ::= NOT expression_p1 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpression(UnaryOperators.NOT,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression_p1 ::= expression_p2 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression_p2 ::= expression_p2 TIMES expression_p3 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.PRODUCT,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression_p2 ::= expression_p2 DIV expression_p3 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.DIV,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression_p2 ::= expression_p2 MOD expression_p3 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.MODULUS,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression_p2 ::= expression_p2 AND expression_p3 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.AND,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression_p2 ::= expression_p3 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p2",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression_p3 ::= expression_p4 EXP expression_p3 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.EXPONENTIAL,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression_p3 ::= expression_p4 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p3",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression_p4 ::= expression_p4 GE expression_p5 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.GREATER,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p4",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression_p4 ::= expression_p4 LE expression_p5 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.LOWER,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p4",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression_p4 ::= expression_p4 EQQ expression_p5 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpression(l,BinaryOperators.EQUALS,r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p4",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression_p4 ::= expression_p5 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p4",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression_p5 ::= expression_p6 PPLUS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UnaryExpression(UnaryOperators.PLUS_PLUS,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p5",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression_p5 ::= expression_p6 MMINUS 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UnaryExpression(UnaryOperators.MINUS_MINUS,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p5",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression_p5 ::= expression_p6 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p5",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression_p6 ::= INT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DummyInteger(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression_p6 ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new DummyBoolean(new Boolean(true)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression_p6 ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new DummyBoolean(new Boolean(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression_p6 ::= IDENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = ident;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression_p6 ::= IDENT LPAR expression_tuple RPAR 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> ee = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new Call(ident, ee);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression_p6 ::= IDENT LPAR RPAR 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                      Identifier ident = new Identifier(i);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = new Call(ident, null);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression_p6 ::= IDENT multi_array 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expression> ii = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                      Identifier ident = new ArrayIdentifier(i,ii);
                      ident.setRow(ileft);
                      ident.setColumn(iright);
                      RESULT = ident;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression_p6 ::= LPAR expression RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_p6",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
