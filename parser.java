
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package kaskell;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\007\004\000\002\007\003\000\002\007\003" +
    "\000\002\006\004\000\002\006\003\000\002\010\003\000" +
    "\002\010\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\021\005\000\002\022\004\000\002\022" +
    "\003\000\002\020\003\000\002\020\003\000\002\013\004" +
    "\000\002\013\005\000\002\011\006\000\002\011\005\000" +
    "\002\012\005\000\002\004\005\000\002\005\006\000\002" +
    "\003\004\000\002\003\003\000\002\031\010\000\002\025" +
    "\011\000\002\024\004\000\002\027\005\000\002\027\003" +
    "\000\002\026\005\000\002\026\003\000\002\023\004\000" +
    "\002\023\003\000\002\015\007\000\002\015\011\000\002" +
    "\016\007\000\002\017\007\000\002\032\007\000\002\030" +
    "\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\004\004\004\001\002\000\022\004\004\006" +
    "\032\024\035\030\051\031\050\034\037\036\034\037\053" +
    "\001\002\000\004\002\135\001\002\000\010\002\uffe7\004" +
    "\uffe7\006\uffe7\001\002\000\010\002\000\004\004\006\011" +
    "\001\002\000\006\002\uffde\006\uffde\001\002\000\004\017" +
    "\125\001\002\000\006\002\uffff\006\011\001\002\000\010" +
    "\002\uffe8\004\uffe8\006\uffe8\001\002\000\004\022\015\001" +
    "\002\000\004\006\020\001\002\000\006\002\uffe4\006\uffe4" +
    "\001\002\000\006\023\022\027\021\001\002\000\006\023" +
    "\uffe2\027\uffe2\001\002\000\004\006\123\001\002\000\004" +
    "\020\023\001\002\000\004\012\024\001\002\000\004\015" +
    "\025\001\002\000\004\004\026\001\002\000\022\004\004" +
    "\006\032\024\035\030\051\031\050\034\037\036\034\037" +
    "\053\001\002\000\006\002\uffe5\006\uffe5\001\002\000\004" +
    "\010\ufff8\001\002\000\026\004\ufffa\005\ufffa\006\ufffa\024" +
    "\ufffa\030\ufffa\031\ufffa\032\ufffa\034\ufffa\036\ufffa\037\ufffa" +
    "\001\002\000\006\007\116\024\035\001\002\000\004\006" +
    "\115\001\002\000\004\022\111\001\002\000\004\026\107" +
    "\001\002\000\012\007\ufff2\024\ufff2\030\ufff2\031\ufff2\001" +
    "\002\000\004\022\101\001\002\000\026\004\ufffc\005\ufffc" +
    "\006\ufffc\024\ufffc\030\ufffc\031\ufffc\032\ufffc\034\ufffc\036" +
    "\ufffc\037\ufffc\001\002\000\004\010\100\001\002\000\026" +
    "\004\ufffd\005\ufffd\006\ufffd\024\ufffd\030\ufffd\031\ufffd\032" +
    "\ufffd\034\ufffd\036\ufffd\037\ufffd\001\002\000\026\004\ufff7" +
    "\005\ufff7\006\ufff7\024\ufff7\030\ufff7\031\ufff7\032\ufff7\034" +
    "\ufff7\036\ufff7\037\ufff7\001\002\000\026\004\ufff6\005\ufff6" +
    "\006\ufff6\024\ufff6\030\ufff6\031\ufff6\032\ufff6\034\ufff6\036" +
    "\ufff6\037\ufff6\001\002\000\004\010\ufff9\001\002\000\026" +
    "\004\ufff5\005\ufff5\006\ufff5\024\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\034\ufff5\036\ufff5\037\ufff5\001\002\000\010\024\035" +
    "\030\051\031\050\001\002\000\012\006\ufff0\012\ufff0\022" +
    "\ufff0\033\ufff0\001\002\000\012\006\ufff1\012\ufff1\022\ufff1" +
    "\033\ufff1\001\002\000\024\004\004\006\032\024\035\030" +
    "\051\031\050\032\070\034\037\036\034\037\053\001\002" +
    "\000\004\022\054\001\002\000\004\006\056\001\002\000" +
    "\004\023\065\001\002\000\004\010\057\001\002\000\006" +
    "\006\060\026\062\001\002\000\006\010\uffd7\023\uffd7\001" +
    "\002\000\004\010\063\001\002\000\006\010\uffd8\023\uffd8" +
    "\001\002\000\004\006\032\001\002\000\004\023\uffd9\001" +
    "\002\000\004\004\004\001\002\000\026\004\uffda\005\uffda" +
    "\006\uffda\024\uffda\030\uffda\031\uffda\032\uffda\034\uffda\036" +
    "\uffda\037\uffda\001\002\000\026\004\ufffb\005\ufffb\006\ufffb" +
    "\024\ufffb\030\ufffb\031\ufffb\032\ufffb\034\ufffb\036\ufffb\037" +
    "\ufffb\001\002\000\004\006\073\001\002\000\004\005\072" +
    "\001\002\000\006\002\uffe9\006\uffe9\001\002\000\004\010" +
    "\074\001\002\000\004\005\uffeb\001\002\000\004\006\077" +
    "\001\002\000\012\007\ufff3\024\ufff3\030\ufff3\031\ufff3\001" +
    "\002\000\004\010\uffee\001\002\000\026\004\ufffe\005\ufffe" +
    "\006\ufffe\024\ufffe\030\ufffe\031\ufffe\032\ufffe\034\ufffe\036" +
    "\ufffe\037\ufffe\001\002\000\006\006\060\026\062\001\002" +
    "\000\004\023\103\001\002\000\004\004\004\001\002\000" +
    "\030\004\uffdd\005\uffdd\006\uffdd\024\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\034\uffdd\035\105\036\uffdd\037\uffdd\001\002\000" +
    "\004\004\004\001\002\000\026\004\uffdc\005\uffdc\006\uffdc" +
    "\024\uffdc\030\uffdc\031\uffdc\032\uffdc\034\uffdc\036\uffdc\037" +
    "\uffdc\001\002\000\004\025\110\001\002\000\012\007\ufff4" +
    "\024\ufff4\030\ufff4\031\ufff4\001\002\000\006\006\060\026" +
    "\062\001\002\000\004\023\113\001\002\000\004\004\004" +
    "\001\002\000\026\004\uffdb\005\uffdb\006\uffdb\024\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\034\uffdb\036\uffdb\037\uffdb\001\002" +
    "\000\004\010\uffef\001\002\000\006\006\060\026\062\001" +
    "\002\000\006\007\120\024\035\001\002\000\006\006\060" +
    "\026\062\001\002\000\006\010\uffed\023\uffed\001\002\000" +
    "\006\010\uffec\023\uffec\001\002\000\006\023\uffe3\027\uffe3" +
    "\001\002\000\006\002\uffdf\006\uffdf\001\002\000\006\030" +
    "\051\031\050\001\002\000\006\012\130\033\131\001\002" +
    "\000\006\012\uffe0\033\uffe0\001\002\000\004\015\133\001" +
    "\002\000\006\030\051\031\050\001\002\000\006\012\uffe1" +
    "\033\uffe1\001\002\000\006\030\051\031\050\001\002\000" +
    "\004\022\uffe6\001\002\000\004\002\001\001\002\000\024" +
    "\004\004\005\137\006\032\024\035\030\051\031\050\034" +
    "\037\036\034\037\053\001\002\000\032\002\uffea\004\uffea" +
    "\005\uffea\006\uffea\024\uffea\030\uffea\031\uffea\032\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\010\002\004\003\006\004\005\001\001\000" +
    "\034\004\037\006\135\007\030\010\040\011\044\013\027" +
    "\014\041\015\042\016\043\017\045\020\032\021\035\022" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\012\023\011\024\007\031\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\123\031\013\001\001" +
    "\000\002\001\001\000\004\025\015\001\001\000\004\027" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\026\001\001\000\034" +
    "\004\037\006\051\007\030\010\040\011\044\013\027\014" +
    "\041\015\042\016\043\017\045\020\032\021\035\022\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\035\022\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\074\021\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\037\007" +
    "\066\010\040\011\044\012\070\013\027\014\041\015\042" +
    "\016\043\017\045\020\032\021\035\022\046\001\001\000" +
    "\002\001\001\000\004\032\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\063" +
    "\001\001\000\002\001\001\000\004\004\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\101\001\001\000\002\001" +
    "\001\000\004\004\103\001\001\000\002\001\001\000\004" +
    "\004\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\111\001\001\000\002\001\001" +
    "\000\004\004\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\121\001\001\000\004\021\075\001\001" +
    "\000\004\030\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\126" +
    "\026\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\131\001\001\000\002\001\001" +
    "\000\004\020\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\004\037\007\066\010\040\011\044\013\027" +
    "\014\041\015\042\016\043\017\045\020\032\021\035\022" +
    "\046\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= blocks 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= blocks functions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= basic_statement SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= complex_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // basic_statement ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // basic_statement ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // complex_statement ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // complex_statement ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // complex_statement ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("complex_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // array ::= LBRACK INT RBRACK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // multi_array ::= multi_array array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_array",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // multi_array ::= array 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multi_array",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= INTT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration ::= type IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= multi_array type IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assignment ::= IDENT multi_array EQ expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assignment ::= IDENT EQ expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // return ::= RETURN IDENT SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // block ::= LBRACE statements RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // return_block ::= LBRACE statements return RBRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_block",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // blocks ::= blocks block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("blocks",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // blocks ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("blocks",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function_head ::= IDENT DOTS type_cartesian MINUS GE type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_head",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function_tail ::= LPAR ident_tuple RPAR VERT MINUS GE return_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_tail",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function ::= function_head function_tail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ident_tuple ::= ident_tuple COMMA IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_tuple",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ident_tuple ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_tuple",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_cartesian ::= type_cartesian X type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_cartesian ::= type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_cartesian",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // functions ::= functions function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // functions ::= function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functions",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // if ::= IF LPAR expression RPAR block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if ::= IF LPAR expression RPAR block ELSE block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // while ::= WHILE LPAR expression RPAR block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // for ::= FOR LPAR for_tuple RPAR block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // for_tuple ::= IDENT SEMICOLON expression SEMICOLON assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_tuple",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
