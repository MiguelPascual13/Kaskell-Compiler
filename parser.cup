/*QUEDAN POR RESOLVER APAÃ‘OS DE BLANCOS*/

package kaskell;

terminal LBRACE, RBRACE, IDENT, EQ, SEMICOLON, PLUS, MINUS, TIMES, DIV,
         GE, LE, DOTS, VERT, EXP, LPAR, RPAR, LBRACK, RBRACK, INT, COMMA,
         INTT, BOOL, RETURN, X, IF, ELSE, WHILE, FOR, OR, AND, MOD, TRUE, FALSE;

non terminal S,
             blocks, block, return_block,
             statements, statement,
             basic_statement,
                 assignment, return, declaration,
             complex_statement,
                 if, while, for,
             type,
             array, multi_array,
             functions, function,
             function_tail, type_cartesian, ident_tuple,
             expression, function_head, for_tuple;

start with S;

S ::= blocks | blocks functions;

statement ::= basic_statement SEMICOLON |
              complex_statement |
              block;
statements ::= statements statement |
               statement;
basic_statement ::= assignment |
                    declaration;
complex_statement ::= if |
                      while |
                      for;

array ::= LBRACK INT RBRACK;
multi_array ::= multi_array array | array;

type ::= INTT |
         BOOL;
         
declaration ::= type IDENT |
                multi_array type IDENT;

assignment ::= IDENT multi_array EQ expression |
               IDENT EQ expression;

return ::= RETURN IDENT SEMICOLON;

block ::= LBRACE statements RBRACE;
return_block ::= LBRACE statements return RBRACE;
blocks ::= blocks block | block;

function_head ::= IDENT DOTS type_cartesian MINUS GE type;
function_tail ::= LPAR ident_tuple RPAR VERT MINUS GE return_block;
function ::= function_head function_tail;
ident_tuple ::= ident_tuple COMMA IDENT | IDENT;
type_cartesian ::= type_cartesian X type | type;
functions ::= functions function | function;

if ::= IF LPAR expression RPAR block |
       IF LPAR expression RPAR block ELSE block;
while ::= WHILE LPAR expression RPAR block;
for ::= FOR LPAR for_tuple RPAR block;
for_tuple ::= IDENT SEMICOLON expression SEMICOLON assignment;
expression ::= INT | IDENT;
